* 4.Importing And Exporting Data
** pre
So far, you've learned how to add a handful of rows to a table using SQL INSERT statements. A row-by-row insert is useful for making quick test tables or adding a few rows to an existing table. But it's more likely you'll need to load hundreds, thousands, or even millions of rows, and no one wants to write separate INSERT statements in those situations. Fortunately, you don't have to.

If your data exists in a /delimited/ text file (with one table row per line of text and each column value separated by a comma or other character) PostgreSQL can import the data in bulk via its COPY command. This command is a PostgreSQL-specific implementation with options for including or excluding columns and handling various delimited text types.

In the opposite direction, COPY will also /export/ data from PostgreSQL tables or from the result of a query to a delimited text file. This technique is handy when you want to share data with colleagues or move it into another format, such as an Excel file.

I briefly touched on COPY for export in [[file:ch03.xhtml#lev31][“Characters”]] on [[file:ch03.xhtml#page_24][page 24]], but in this chapter I'll discuss import and export in more depth. For importing, I'll start by introducing you to one of my favorite data sets: the Decennial U.S. Census population tally by county.

Three steps form the outline of most of the imports you'll do:

1) Prep the source data in the form of a delimited text file.
2) Create a table to store the data.
3) Write a COPY script to perform the import.

After the import is done, we'll check the data and look at additional options for importing and exporting.

A delimited text file is the most common file format that's portable across proprietary and open source systems, so we'll focus on that file type. If you want to transfer data from another database program's proprietary format directly to PostgreSQL, such as Microsoft Access or MySQL, you'll need to use a third-party tool. Check the PostgreSQL wiki at /[[https://wiki.postgresql.org/wiki/]]/ and search for “Converting from other Databases to PostgreSQL” for a list of tools.

If you're using SQL with another database manager, check the other database's documentation for how it handles bulk imports. The MySQL database, for example, has a LOAD DATA INFILE statement, and Microsoft's SQL Server has its own BULK INSERT command.

** Working with Delimited Text Files


Many software applications store data in a unique format, and translating one data format to another is about as easy as a person trying to read the Cyrillic alphabet if they understand only English. Fortunately, most software can import from and export to a delimited text file, which is a common data format that serves as a middle ground.

A delimited text file contains rows of data, and each row represents one row in a table. In each row, a character separates, or delimits, each data column. I've seen all kinds of characters used as delimiters, from ampersands to pipes, but the comma is most commonly used; hence the name of a file type you'll see often: /comma-separated values (CSV)/. The terms /CSV/ and /comma-delimited/ are interchangeable.

Here's a typical data row you might see in a comma-delimited file:

John,Doe,123 Main St.,Hyde Park,NY,845-555-1212

Notice that a comma separates each piece of data---first name, last name, street, town, state, and phone---without any spaces. The commas tell the software to treat each item as a separate column, either upon import or export. Simple enough.

*** Quoting Columns that Contain Delimiters


Using commas as a column delimiter leads to a potential dilemma: what if the value in a column includes a comma? For example, sometimes people combine an apartment number with a street address, as in 123 Main St., Apartment 200. Unless the system for delimiting accounts for that extra comma, during import the line will appear to have an extra column and cause the import to fail.

To handle such cases, delimited files wrap columns that contain a delimiter character with an arbitrary character called a /text qualifier/ that tells SQL to ignore the delimiter character held within. Most of the time in comma-delimited files the text qualifier used is the double quote. Here's the example data row again, but with the street name surrounded by double quotes:

John,Doe,"123 Main St., Apartment 200",Hyde Park,NY,845-555-1212

On import, the database will recognize that double quotes signify one column regardless of whether it finds a delimiter within the quotes. When importing CSV files, PostgreSQL by default ignores delimiters inside double-quoted columns, but you can specify a different text qualifier if your import requires it. (And, given the sometimes odd choices made by IT professionals, you may indeed need to employ a different character.)

*** Handling Header Rows

Another feature you'll often find inside a delimited text file is the /header row/. As the name implies, it's a single row at the top, or head, of the file that lists the name of each data field. Usually, a header is created during the export of data from a database. Here's an example with the delimited row I've been using:

FIRSTNAME,LASTNAME,STREET,CITY,STATE,PHONE
John,Doe,"123 Main St., Apartment 200",Hyde Park,NY,845-555-1212

Header rows serve a few purposes. For one, the values in the header row identify the data in each column, which is particularly useful when you're deciphering a file's contents. Second, some database managers (although not PostgreSQL) use the header row to map columns in the delimited file to the correct columns in the import table. Because PostgreSQL doesn't use the header row, we don't want that row imported to a table, so we'll use a HEADER option in the COPY command to exclude it. I'll cover this with all COPY options in the next section.

** Using COPY to Import Data


To import data from an external file into our database, first we need to check out a source CSV file and build the table in PostgreSQL to hold the data. Thereafter, the SQL statement for the import is relatively simple. All you need are the three lines of code in [[file:ch04.xhtml#ch04list1][Listing 4-1]]:

➊ COPY /table_name/
➋ FROM '/C:YourDirectoryyour_file.csv/'
➌ WITH (FORMAT CSV, HEADER);
/Listing 4-1: Using COPY for data import/

The block of code starts with the COPY keyword ➊ followed by the name of the target table, which must already exist in your database. Think of this syntax as meaning, “Copy data to my table called table_name.”

The FROM keyword ➋ identifies the full path to the source file, including its name. The way you designate the path depends on your operating system. For Windows, begin with the drive letter, colon, backslash, and directory names. For example, to import a file located on my Windows desktop, the FROM line would read:

: FROM 'C:UsersAnthonyDesktop/my_file.csv/'

On macOS or Linux, start at the system root directory with a forward slash and proceed from there. Here's what the FROM line might look like when importing a file located on my Mac desktop:

: FROM '/Users/anthony/Desktop//my_file.csv/'

Note that in both cases the full path and filename are surrounded by single quotes. For the examples in the book, I use the Windows-style path C:YourDirectory as a placeholder. Replace that with the path where you stored the file.

The WITH keyword ➌ lets you specify options, surrounded by paren­theses, that you can tailor to your input or output file. Here we specify that the external file should be comma-delimited, and that we should exclude the file's header row in the import. It's worth examining all the options in the official PostgreSQL documentation at /[[https://www.postgresql.org/docs/current/static/sql-copy.html]]/, but here is a list of the options you'll commonly use:

*Input and output file format*

Use the FORMAT format_name option to specify the type of file you're reading or writing. Format names are CSV, TEXT, or BINARY. Unless you're deep into building technical systems, you'll rarely encounter a need to work with BINARY, where data is stored as a sequence of bytes. More often, you'll work with standard CSV files. In the TEXT format, a /tab/ character is the delimiter by default (although you can specify another character) and backslash characters such as r are recognized as their ASCII equivalents---in this case, a carriage return. The TEXT format is used mainly by PostgreSQL's built-in backup programs.

*Presence of a header row*

On import, use HEADER to specify that the source file has a header row. You can also specify it longhand as HEADER ON, which tells the database to start importing with the second line of the file, preventing the unwanted import of the header. You don't want the column names in the header to become part of the data in the table. On export, using HEADER tells the database to include the column names as a header row in the output file, which is usually helpful to do.

*Delimiter*

The DELIMITER 'character' option lets you specify which character your import or export file uses as a delimiter. The delimiter must be a single character and cannot be a carriage return. If you use FORMAT CSV, the assumed delimiter is a comma. I include DELIMITER here to show that you have the option to specify a different delimiter if that's how your data arrived. For example, if you received pipe-delimited data, you would treat the option this way: DELIMITER '|'.

*Quote character*

Earlier, you learned that in a CSV, commas inside a single column value will mess up your import unless the column value is surrounded by a character that serves as a text qualifier, telling the database to handle the value within as one column. By default, PostgreSQL uses the double quote, but if the CSV you're importing uses a different character, you can specify it with the QUOTE 'quote_character' option.

Now that you better understand delimited files, you're ready to import one.

** Importing Census Data Describing Counties


The data set you'll work with in this import exercise is considerably larger than the teachers table you made in [[file:ch01.xhtml#ch01][Chapter 1]]. It contains census data about every county in the United States and is 3,143 rows deep and 91 columns wide.

To understand the data, it helps to know a little about the U.S. Census. Every 10 years, the government conducts a full count of the population---one of several ongoing programs by the Census Bureau to collect demographic data. Each household in America receives a questionnaire about each person in it---their age, gender, race, and whether they are Hispanic or not. The U.S. Constitution mandates the count to determine how many members from each state make up the U.S. House of Representatives. Based on the 2010 Census, for example, Texas gained four seats in the House while New York and Ohio lost two seats each. Although apportioning House seats is the count's main purpose, the data's also a boon for trend trackers studying the population. A good synopsis of the 2010 count's findings is available at /[[https://www.census.gov/prod/cen2010/briefs/c2010br-01.pdf]]/.

The Census Bureau reports overall population totals and counts by race and ethnicity for various geographies including states, counties, cities, places, and school districts. For this exercise, I compiled a select collection of columns for the 2010 Census county-level counts into a file named /us_counties_2010.csv/. Download the /us_counties_2010.csv/ file from /[[https://www.nostarch.com/practicalSQL/]]/ and save it to a folder on your computer.

Open the file with a plain text editor. You should see a header row that begins with these columns:

NAME,STUSAB,SUMLEV,REGION,DIVISION,STATE,COUNTY /--snip--/

Let's explore some of the columns by examining the code for creating the import table.

*** Creating the us_counties_2010 Table


The code in [[file:ch04.xhtml#ch04list2][Listing 4-2]] shows only an abbreviated version of the CREATE TABLE script; many of the columns have been omitted. The full version is available (and annotated) along with all the code examples in the book's resources. To import it properly, you'll need to download the full table definition.

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis

CREATE TABLE us_counties_2010 (
    geo_name varchar(90),                    -- Name of the geography
    state_us_abbreviation varchar(2),        -- State/U.S. abbreviation
    summary_level varchar(3),                -- Summary Level
    region smallint,                         -- Region
    division smallint,                       -- Division
    state_fips varchar(2),                   -- State FIPS code
    county_fips varchar(3),                  -- County code
    area_land bigint,                        -- Area (Land) in square meters
    area_water bigint,                        -- Area (Water) in square meters
    population_count_100_percent integer,    -- Population count (100%)
    housing_unit_count_100_percent integer,  -- Housing Unit count (100%)
    internal_point_lat numeric(10,7),        -- Internal point (latitude)
    internal_point_lon numeric(10,7),        -- Internal point (longitude)

    -- This section is referred to as P1. Race:
    p0010001 integer,   -- Total population
    p0010002 integer,   -- Population of one race:
    p0010003 integer,       -- White Alone
    p0010004 integer,       -- Black or African American alone
    p0010005 integer,       -- American Indian and Alaska Native alone
    p0010006 integer,       -- Asian alone
    p0010007 integer,       -- Native Hawaiian and Other Pacific Islander alone
    p0010008 integer,       -- Some Other Race alone
    p0010009 integer,   -- Population of two or more races
    p0010010 integer,   -- Population of two races:
    p0010011 integer,       -- White; Black or African American
    p0010012 integer,       -- White; American Indian and Alaska Native
    p0010013 integer,       -- White; Asian
    p0010014 integer,       -- White; Native Hawaiian and Other Pacific Islander
    p0010015 integer,       -- White; Some Other Race
    p0010016 integer,       -- Black or African American; American Indian and Alaska Native
    p0010017 integer,       -- Black or African American; Asian
    p0010018 integer,       -- Black or African American; Native Hawaiian and Other Pacific Islander
    p0010019 integer,       -- Black or African American; Some Other Race
    p0010020 integer,       -- American Indian and Alaska Native; Asian
    p0010021 integer,       -- American Indian and Alaska Native; Native Hawaiian and Other Pacific Islander
    p0010022 integer,       -- American Indian and Alaska Native; Some Other Race
    p0010023 integer,       -- Asian; Native Hawaiian and Other Pacific Islander
    p0010024 integer,       -- Asian; Some Other Race
    p0010025 integer,       -- Native Hawaiian and Other Pacific Islander; Some Other Race
    p0010026 integer,   -- Population of three races
    p0010047 integer,   -- Population of four races
    p0010063 integer,   -- Population of five races
    p0010070 integer,   -- Population of six races

    -- This section is referred to as P2. HISPANIC OR LATINO, AND NOT HISPANIC OR LATINO BY RACE
    p0020001 integer,   -- Total
    p0020002 integer,   -- Hispanic or Latino
    p0020003 integer,   -- Not Hispanic or Latino:
    p0020004 integer,   -- Population of one race:
    p0020005 integer,       -- White Alone
    p0020006 integer,       -- Black or African American alone
    p0020007 integer,       -- American Indian and Alaska Native alone
    p0020008 integer,       -- Asian alone
    p0020009 integer,       -- Native Hawaiian and Other Pacific Islander alone
    p0020010 integer,       -- Some Other Race alone
    p0020011 integer,   -- Two or More Races
    p0020012 integer,   -- Population of two races
    p0020028 integer,   -- Population of three races
    p0020049 integer,   -- Population of four races
    p0020065 integer,   -- Population of five races
    p0020072 integer,   -- Population of six races

    -- This section is referred to as P3. RACE FOR THE POPULATION 18 YEARS AND OVER
    p0030001 integer,   -- Total
    p0030002 integer,   -- Population of one race:
    p0030003 integer,       -- White alone
    p0030004 integer,       -- Black or African American alone
    p0030005 integer,       -- American Indian and Alaska Native alone
    p0030006 integer,       -- Asian alone
    p0030007 integer,       -- Native Hawaiian and Other Pacific Islander alone
    p0030008 integer,       -- Some Other Race alone
    p0030009 integer,   -- Two or More Races
    p0030010 integer,   -- Population of two races
    p0030026 integer,   -- Population of three races
    p0030047 integer,   -- Population of four races
    p0030063 integer,   -- Population of five races
    p0030070 integer,   -- Population of six races

    -- This section is referred to as P4. HISPANIC OR LATINO, AND NOT HISPANIC OR LATINO BY RACE
    -- FOR THE POPULATION 18 YEARS AND OVER
    p0040001 integer,   -- Total
    p0040002 integer,   -- Hispanic or Latino
    p0040003 integer,   -- Not Hispanic or Latino:
    p0040004 integer,   -- Population of one race:
    p0040005 integer,   -- White alone
    p0040006 integer,   -- Black or African American alone
    p0040007 integer,   -- American Indian and Alaska Native alone
    p0040008 integer,   -- Asian alone
    p0040009 integer,   -- Native Hawaiian and Other Pacific Islander alone
    p0040010 integer,   -- Some Other Race alone
    p0040011 integer,   -- Two or More Races
    p0040012 integer,   -- Population of two races
    p0040028 integer,   -- Population of three races
    p0040049 integer,   -- Population of four races
    p0040065 integer,   -- Population of five races
    p0040072 integer,   -- Population of six races

    -- This section is referred to as H1. OCCUPANCY STATUS
    h0010001 integer,   -- Total housing units
    h0010002 integer,   -- Occupied
    h0010003 integer    -- Vacant
);
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|

/Listing 4-2: A CREATE TABLE statement for census county data/

To create the table, in pgAdmin click the analysis database that you created in [[file:ch01.xhtml#ch01][Chapter 1]]. (It's best to store the data in this book in analysis because we'll reuse some of it in later chapters.) From the pgAdmin menu bar, select *Tools ▸ Query Tool*. Paste the script into the window and run it.

Return to the main pgAdmin window, and in the object browser, right-click and refresh the analysis database. Choose *Schemas ▸ public ▸ Tables* to see the new table. Although it's empty, you can see the structure by running a basic SELECT query in pgAdmin's Query Tool:

SELECT * from us_counties_2010;

When you run the SELECT query, you'll see the columns in the table you created. No data rows exist yet.

*** Census Columns and Data Types

Before we import the CSV file into the table, let's walk through several of the columns and the data types I chose in [[file:ch04.xhtml#ch04list2][Listing 4-2]]. As my guide, I used the official census data dictionary for this data set found at [[http://www.census.gov/prod/cen2010/doc/pl94-171.pdf]], although I give some columns more readable names in the table definition. Relying on a data dictionary when possible is good practice, because it helps you avoid misconfiguring columns or potentially losing data. Always ask if one is available, or do an online search if the data is public.

In this set of census data, and thus the table you just made, each row describes the demographics of one county, starting with its geo_name ➊ and its two-character state abbreviation, the state_us_abbreviation ➋. Because both are text, we store them as varchar. The data dictionary indicates that the maximum length of the geo_name field is 90 characters, but because most names are shorter, using varchar will conserve space if we fill the field with a shorter name, such as Lee County, while allowing us to specify the maximum 90 characters.

The geography, or summary level, represented by each row is described by summary_level ➌. We're working only with county-level data, so the code is the same for each row: 050. Even though that code resembles a number, we're treating it as text by again using varchar. If we used an integer type, that leading 0 would be stripped on import, leaving 50. We don't want to do that because 050 is the complete summary level code, and we'd be altering the meaning of the data if the leading 0 were lost. Also, we won't be doing any math with this value.

Numbers from 0 to 9 in region and division ➍ represent the location of a county in the United States, such as the Northeast, Midwest, or South Atlantic. No number is higher than 9, so we define the columns with type smallint. We again use varchar for state_fips and county_fips, which are the standard federal codes for those entities, because those codes contain leading zeros that should not be stripped. It's always important to distinguish codes from numbers; these state and county values are actually labels as opposed to numbers used for math.

The number of square meters for land and water in the county are recorded in area_land and area_water ➎, respectively. In certain places---such as Alaska, where there's lots of land to go with all that snow---some values easily surpass the integer type's maximum of 2,147,483,648. For that reason, we're using bigint, which will handle the 376,855,656,455 square meters in the Yukon-Koyukuk Census Area with room to spare.

Next, population_count_100_percent and housing_unit_count_100_percent ➏ are the total counts of population and housing units in the geography. In 2010, the United States had 308.7 million people and 131.7 million housing units. The population and housing units for any county fits well within the integer data type's limits, so we use that for both.

The latitude and longitude of a point near the center of the county, called an /internal point/, are specified in internal_point_lat and internal_point_lon ➐, respectively. The Census Bureau---along with many mapping systems---expresses latitude and longitude coordinates using a /decimal degrees/ system. /Latitude/ represents positions north and south on the globe, with the equator at 0 degrees, the North Pole at 90 degrees, and the South Pole at −90 degrees.

/Longitude/ represents locations east and west, with the /Prime Meridian/ that passes through Greenwich in London at 0 degrees longitude. From there, longitude increases both east and west (positive numbers to the east and negative to the west) until they meet at 180 degrees on the opposite side of the globe. The location there, known as the /antimeridian/, is used as the basis for the /International Date Line/.

When reporting interior points, the Census Bureau uses up to seven decimal places. With a value up to 180 to the left of the decimal, we need to account for a maximum of 10 digits total. So, we're using numeric with a precision of 10 and a scale of 7.

*NOTE*

/PostgreSQL, through the PostGIS extension, can store geometric data, which includes points that represent latitude and longitude in a single column. We'll explore geometric data when we cover geographical queries in [[file:ch14.xhtml#ch14][Chapter 14]]./

Finally, we reach a series of columns ➑ that contain iterations of the population counts by race and ethnicity for the county as well as housing unit counts. The full set of 2010 Census data contains 291 of these columns. I've pared that down to 78 for this exercise, omitting many of the columns to make the data set more compact for these exercises.

I won't discuss all the columns now, but [[file:ch04.xhtml#ch04tab1][Table 4-1]] shows a small sample.

[[../images/ch04.org_20191207_100833.png]]
Population of one race: Some Other Race alone

You'll explore this data more in the next chapter when we look at math with SQL. For now, let's run the import.

*** Performing the Census Import with COPY

Now you're ready to bring the census data into the table. Run the code in [[file:ch04.xhtml#ch04list3][Listing 4-3]], remembering to change the path to the file to match the location of the data on your computer:

#+begin_src sql :engine postgresql :dbuser postgres  :dbpassword 1618 :database analysis
\copy us_counties_2010 FROM 'data/us_counties_2010.csv' WITH (FORMAT CSV, HEADER);
#+end_src

#+RESULTS:
| COPY 3143 |
|-----------|

/Listing 4-3: Importing census data using COPY/

#+BEGIN_SRC shell
ls -l 'data/us_counties_2010.csv' | sed "s/$USER/me/g"
#+END_SRC

#+RESULTS:
: -rw-rw-r-- 1 me me 1170359 Dec  7 10:22 data/us_counties_2010.csv

When the code executes, you should see the following message in pgAdmin:

Query returned successfully: 3143 rows affected

That's good news: the import CSV has the same number of rows. If you have an issue with the source CSV or your import statement, the database will throw an error. For example, if one of the rows in the CSV had more columns than in the target table, you'd see an error message that provides a hint as to how to fix it:

ERROR: extra data after last expected column
SQL state: 22P04
Context: COPY us_counties_2010, line 2: "Autauga County,AL,050,3,6,01,001 ..."

Even if no errors are reported, it's always a good idea to visually scan the data you just imported to ensure everything looks as expected. Start with a SELECT query of all columns and rows:

SELECT * FROM us_counties_2010;

There should be 3,143 rows displayed in pgAdmin, and as you scroll left and right through the result set, each field should have the expected values. Let's review some columns that we took particular care to define with the appropriate data types. For example, run the following query to show the counties with the largest area_land values. We'll use a LIMIT clause, which will cause the query to only return the number of rows we want; here, we'll ask for three:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT geo_name, state_us_abbreviation, area_land
FROM us_counties_2010
ORDER BY area_land DESC
LIMIT 3;
#+end_src

#+RESULTS:
| geo_name                  | state_us_abbreviation |    area_land |
|---------------------------+-----------------------+--------------|
| Yukon-Koyukuk Census Area | AK                    | 376855656455 |
| North Slope Borough       | AK                    | 229720054439 |
| Bethel Census Area        | AK                    | 105075822708 |

This query ranks county-level geographies from largest land area to smallest in square meters. We defined area_land as bigint because the largest values in the field are bigger than the upper range provided by regular integer. As you might expect, big Alaskan geographies are at the top:


Next, check the latitude and longitude columns of internal_point_lat and internal_point_lon, which we defined with numeric(10,7). This code sorts the counties by longitude from the greatest to smallest value. This time, we'll use LIMIT to retrieve five rows:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT geo_name, state_us_abbreviation, internal_point_lon
FROM us_counties_2010
ORDER BY internal_point_lon DESC
LIMIT 5;
#+end_src

#+RESULTS:
| geo_name                   | state_us_abbreviation | internal_point_lon |
|----------------------------+-----------------------+--------------------|
| Aleutians West Census Area | AK                    |        178.3388130 |
| Washington County          | ME                    |        -67.6093542 |
| Hancock County             | ME                    |        -68.3707034 |
| Aroostook County           | ME                    |        -68.6494098 |
| Penobscot County           | ME                    |        -68.6574869 |

Longitude measures locations from east to west, with locations west of the Prime Meridian in England represented as negative numbers starting with −1, −2, −3, and so on the farther west you go. We sorted in descending order, so we'd expect the easternmost counties of the United States to show at the top of the query result. Instead---surprise!---there's a lone Alaska geography at the top:

Here's why: the Alaskan Aleutian Islands extend so far west (farther west than Hawaii) that they cross the antimeridian at 180 degrees longitude by less than 2 degrees. Once past the antimeridian, longitude turns positive, counting back down to 0. Fortunately, it's not a mistake in the data; however, it's a fact you can tuck away for your next trivia team competition.

Congratulations! You have a legitimate set of government demographic data in your database. I'll use it to demonstrate exporting data with COPY later in this chapter, and then you'll use it to learn math functions in [[file:ch05.xhtml#ch05][Chapter 5]]. Before we move on to exporting data, let's examine a few additional importing techniques.

** Importing a Subset of Columns with COPY


If a CSV file doesn't have data for all the columns in your target database table, you can still import the data you have by specifying which columns are present in the data. Consider this scenario: you're researching the salaries of all town supervisors in your state so you can analyze government spending trends by geography. To get started, you create a table called supervisor_salaries with the code in [[file:ch04.xhtml#ch04list4][Listing 4-4]]:
#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
drop table  supervisor_salaries;
#+end_src

#+RESULTS:
| DROP TABLE |
|------------|

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis :results none
CREATE TABLE supervisor_salaries (
town varchar(30),
county varchar(30),
supervisor varchar(30),
start_date date,
salary money,
benefits money
);
#+end_src
/Listing 4-4: Creating a table to track supervisor salaries/


#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
select * from supervisor_salaries;
#+end_src

#+RESULTS:
| town | county | supervisor | start_date | salary | benefits |
|------+--------+------------+------------+--------+----------|

You want columns for the town and county, the supervisor's name, the date he or she started, and salary and benefits (assuming you just care about current levels). However, the first county clerk you contact says, “Sorry, we only have town, supervisor, and salary. You'll need to get the rest from elsewhere.” You tell them to send a CSV anyway. You'll import what you can.

I've included such a sample CSV you can download in the book's resources at /[[https://www.nostarch.com/practicalSQL/]]/, called /supervisor_salaries.csv/. You could try to import it using this basic COPY syntax:


#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis :results none
\copy supervisor_salaries FROM 'data/supervisor_salaries.csv'  WITH (FORMAT CSV, HEADER);
#+end_src

#+RESULTS:
|   |


But if you do, PostgreSQL will return an error:

psql:/tmp/babel-PSl3Td/sql-in-ZJqvjf:1: ERROR:  column "town" of relation "supervisor_salaries" does not exist

The database complains that when it got to the fourth column of the table, start_date, it couldn't find any data in the CSV. The workaround for this situation is to tell the database which columns in the table are present in the CSV, as shown in [[file:ch04.xhtml#ch04list5][Listing 4-5]]:

#+begin_src sql :engine postgresql :dbuser postgres :dbpassword 1618 :database analysis
\copy supervisor_salaries (town, supervisor, salary) FROM 'data/supervisor_salaries.csv' WITH (FORMAT CSV, HEADER);
#+end_src

#+RESULTS:
| COPY 5 |
|--------|
/Listing 4-5: Importing salaries data from CSV to three table columns/

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
drop table  supervisor_salaries;
#+end_src

#+RESULTS:
| DROP TABLE |
|------------|

By noting in parentheses the three present columns after the table name, we tell PostgreSQL to only look for data to fill those columns when it reads the CSV. Now, if you select the first couple of rows from the table, you'll see only those columns filled:
#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
select * from supervisor_salaries;
#+end_src

#+RESULTS:
| town        | county | supervisor | start_date | salary      | benefits |
|-------------+--------+------------+------------+-------------+----------|
| Anytown     |        | Jones      |            | ￥27,000.00 |          |
| Bumblyburg  |        | Baker      |            | ￥24,999.00 |          |
| Moetown     |        | Smith      |            | ￥32,100.00 |          |
| Bigville    |        | Kao        |            | ￥31,500.00 |          |
| New Brillig |        | Carroll    |            | ￥72,690.00 |          |

** Adding a Default Value to a Column During Import


What if you want to populate the county column during the import, even though the value is missing from the CSV file? You can do so by using a /temporary table/. Temporary tables exist only until you end your database session. When you reopen the database (or lose your connection), those tables disappear. They're handy for performing intermediary operations on data as part of your processing pipeline; we'll use one to add a county name to the supervisor_salaries table as we import the CSV.

Start by clearing the data you already imported into supervisor_salaries using a DELETE query:

DELETE FROM supervisor_salaries;

When that query finishes, run the code in [[file:ch04.xhtml#ch04list6][Listing 4-6]]:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
➊ CREATE TEMPORARY TABLE supervisor_salaries_temp (LIKE supervisor_salaries);

➋ COPY supervisor_salaries_temp (town, supervisor, salary)
  FROM '/C:YourDirectory/supervisor_salaries.csv'
  WITH (FORMAT CSV, HEADER);

➌ INSERT INTO supervisor_salaries (town, county, supervisor, salary)
  SELECT town, 'Some County', supervisor, salary
  FROM supervisor_salaries_temp;

➍ DROP TABLE supervisor_salaries_temp;
#+end_src
/Listing 4-6: Using a temporary table to add a default value to a column during import/

This script performs four tasks. First, we create a temporary table called supervisor_salaries_temp ➊ based on the original supervisor_salaries table by passing as an argument the LIKE keyword (covered in “Using LIKE and ILIKE with WHERE” on [[file:ch02.xhtml#page_19][page 19]]) followed by the parent table to copy. Then we import the /supervisor_salaries.csv/ file ➋ into the temporary table using the now-familiar COPY syntax.

Next, we use an INSERT statement to fill the salaries table ➌. Instead of specifying values, we employ a SELECT statement to query the temporary table. That query specifies the value for the second column, not as a column name, but as a string inside single quotes.

Finally, we use DROP TABLE to erase the temporary table ➍. The temporary table will automatically disappear when you disconnect from the PostgreSQL session, but this removes it now in case we want to run the query again against another CSV.

After you run the query, run a SELECT statement on the first couple of rows to see the effect:

[[../images/prog_page_51.jpg]]

Now you've filled the county field with a value. The path to this import might seem laborious, but it's instructive to see how data processing can require multiple steps to get the desired results. The good news is that this temporary table demo is an apt indicator of the flexibility SQL offers to control data handling.

** Using COPY to Export Data

The main difference between exporting and importing data with COPY is that rather than using FROM to identify the source data, you use TO for the path and name of the output file. You control how much data to export---an entire table, just a few columns, or to fine-tune it even more, the results of a query.

Let's look at three quick examples.

*** Exporting All Data

The simplest export sends everything in a table to a file. Earlier, you created the table us_counties_2010 with 91 columns and 3,143 rows of census data. The SQL statement in [[file:ch04.xhtml#ch04list7][Listing 4-7]] exports all the data to a text file named /us_counties_export.txt/. The WITH keyword option tells PostgreSQL to include a header row and use the pipe symbol instead of a comma for a delimiter. I've used the /.txt/ file extension here for two reasons. First, it demonstrates that you can export to any text file format; second, we're using a pipe for a delimiter, not a comma. I like to avoid calling files /.csv/ unless they truly have commas as a separator.

Remember to change the output directory to your preferred location.

COPY us_counties_2010
TO '/C:YourDirectory/us_counties_export.txt'
WITH (FORMAT CSV, HEADER, DELIMITER '|');

/Listing 4-7: Exporting an entire table with COPY/

 /Exporting Particular Columns/


You don't always need (or want) to export all your data: you might have sensitive information, such as Social Security numbers or birthdates, that need to remain private. Or, in the case of the census county data, maybe you're working with a mapping program and only need the county name and its geographic coordinates to plot the locations. We can export only these three columns by listing them in parentheses after the table name, as shown in [[file:ch04.xhtml#ch04list8][Listing 4-8]]. Of course, you must enter these column names precisely as they're listed in the data for PostgreSQL to recognize them.

COPY us_counties_2010 (geo_name, internal_point_lat, internal_point_lon)
TO '/C:YourDirectory/us_counties_latlon_export.txt'
WITH (FORMAT CSV, HEADER, DELIMITER '|');

/Listing 4-8: Exporting selected columns from a table with COPY/

 /Exporting Query Results/


Additionally, you can add a query to COPY to fine-tune your output. In [[file:ch04.xhtml#ch04list9][Listing 4-9]] we export the name and state abbreviation of only those counties whose name contains the letters mill in either uppercase or lowercase by using the case-insensitive ILIKE and the % wildcard character we covered in “Using LIKE and ILIKE with WHERE” on [[file:ch02.xhtml#page_19][page 19]].

COPY (
    SELECT geo_name, state_us_abbreviation
    FROM us_counties_2010
    WHERE geo_name ILIKE '%mill%'
     )
TO '/C:YourDirectory/us_counties_mill_export.txt'
WITH (FORMAT CSV, HEADER, DELIMITER '|');

/Listing 4-9: Exporting query results with COPY/

After running the code, your output file should have nine rows with county names including Miller, Roger Mills, and Vermillion.


** Wrapping Up


Now that you've learned how to bring external data into your database, you can start digging into a myriad of data sets, whether you want to explore one of the thousands of publicly available data sets, or data related to your own career or studies. Plenty of data is available in CSV format or a format easily convertible to CSV. Look for data dictionaries to help you understand the data and choose the right data type for each field.

The census data you imported as part of this chapter's exercises will play a starring role in the next chapter in which we explore math functions with SQL.


*TRY IT YOURSELF*

Continue your exploration of data import and export with these exercises. Remember to consult the PostgreSQL documentation at /[[https://www.postgresql.org/docs/current/static/sql-copy.html]]/ for hints:

1. Write a WITH statement to include with COPY to handle the import of an imaginary text file whose first couple of rows look like this:

   id:movie:actor
   50:#Mission: Impossible#:Tom Cruise

2. Using the table us_counties_2010 you created and filled in this chapter, export to a CSV file the 20 counties in the United States that have the most housing units. Make sure you export only each county's name, state, and number of housing units. (Hint: Housing units are totaled for each county in the column housing_unit_count_100_percent.)

3. Imagine you're importing a file that contains a column with these values:

   17519.668
   20084.461
   18976.335

Will a column in your target table with data type numeric(3,8) work for these values? Why or why not?


 start digging into a myriad of data sets, whether you want to explore one of the thousands of publicly available data sets, or data related to your own career or studies. Plenty of data is available in CSV format or a format easily convertible to CSV. Look for data dictionaries to help you understand the data and choose the right data type for each field.

The census data you imported as part of this chapter's exercises will play a starring role in the next chapter in which we explore math functions with SQL.

<<ch04sb1>>
*TRY IT YOURSELF*

Continue your exploration of data import and export with these exercises. Remember to consult the PostgreSQL documentation at /[[https://www.postgresql.org/docs/current/static/sql-copy.html]]/ for hints:

1. Write a WITH statement to include with COPY to handle the import of an imaginary text file whose first couple of rows look like this:

   id:movie:actor\\
   50:#Mission: Impossible#:Tom Cruise

2. Using the table us\_counties\_2010 you created and filled in this chapter, export to a CSV file the 20 counties in the United States that have the most housing units. Make sure you export only each county's name, state, and number of housing units. (Hint: Housing units are totaled for each county in the column housing\_unit\_count\_100\_percent.)

3. Imagine you're importing a file that contains a column with these values:

   17519.668\\
   20084.461\\
   18976.335

Will a column in your target table with data type numeric(3,8) work for these values? Why or why not?




昨晚看了一集rick and morty, 有一個30秒的情景, morty在玩一款遊戲, 採礦賺錢, 賺錢買礦車, 礦車採礦賺錢, 拿錢買礦車, 買車採礦.

昨晚看了一集rick and morty, 有一个30秒的情景, morty在玩一款游戏, 矿车采矿赚钱, 钱买矿车, 矿车采矿赚钱, 循环空转, 乐此不疲.
