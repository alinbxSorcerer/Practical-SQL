* 2 Beginning Data Exploration With Select
** Pre

For me, the best part of digging into data isn't the prerequisites of gathering, loading, or cleaning the data, but when I actually get to ~interview~ the data. Those are the moments when I discover whether the data is clean or dirty, whether it's complete, and most of all, what story the data can tell. Think of interviewing data as a process akin to interviewing a person applying for a job. You want to ask questions that reveal whether the reality of their expertise matches their resume.

Interviewing is exciting because you discover truths. For example, you might find that half the respondents forgot to fill out the email field in the questionnaire, or the mayor hasn't paid property taxes for the past five years. Or you might learn that your data is dirty: names are spelled inconsistently, dates are incorrect, or numbers don't jibe with your expectations. Your findings become part of the data's story.

In SQL, interviewing data starts with the SELECT keyword, which retrieves rows and columns from one or more of the tables in a database. A SELECT statement can be simple, retrieving everything in a single table, or it can be complex enough to link dozens of tables while handling multiple calculations and filtering by exact criteria.

We'll start with simple SELECT statements.

** Basic SELECT Syntax


Here's a SELECT statement that fetches every row and column in a table called my_table:

: SELECT * FROM my_table;

This single line of code shows the most basic form of a SQL query. The asterisk following the SELECT keyword is a /wildcard/. A wildcard is like a stand-in for a value: it doesn't represent anything in particular and instead represents everything that value could possibly be. Here, it's shorthand for “select all columns.” If you had given a column name instead of the wildcard, this command would select the values in that column. The FROM keyword indicates you want the query to return data from a particular table. The semicolon after the table name tells PostgreSQL it's the end of the query statement.

Let's use this SELECT statement with the asterisk wildcard on the teachers table you created in [[file:ch01.xhtml#ch01][Chapter 1]]. Once again, open pgAdmin, select the analysis database, and open the Query Tool. Then execute the statement shown in [[file:ch02.xhtml#ch02list1][Listing 2-1]]:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT * FROM teachers;
#+end_src

#+RESULTS:
| id | first_name | last_name | school              |  hire_date | salary |
|----+------------+-----------+---------------------+------------+--------|
|  1 | Janet      | Smith     | F.D. Roosevelt HS   | 2011-10-30 |  36200 |
|  2 | Lee        | Reynolds  | F.D. Roosevelt HS   | 1993-05-22 |  65000 |
|  3 | Samuel     | Cole      | Myers Middle School | 2005-08-01 |  43500 |
|  4 | Samantha   | Bush      | Myers Middle School | 2011-10-30 |  36200 |
|  5 | Betty      | Diaz      | Myers Middle School | 2005-08-30 |  43500 |
|  6 | Kathleen   | Roush     | F.D. Roosevelt HS   | 2010-10-22 |  38500 |

/Listing 2-1: Querying all rows and columns from the teachers table/

Note that the id column (of type bigserial) automatically fills with sequential integers, even though you didn't explicitly insert them. Very handy. This auto-incrementing integer acts as a unique identifier, or key, that not only ensures each row in the table is unique, but also will later give us a way to connect this table to other tables in the database.

Let's move on to refining this query.
***  Querying a Subset of Columns


Using the asterisk wildcard is helpful for discovering the entire contents of a table. But often it's more practical to limit the columns the query retrieves, especially with large databases. You can do this by naming columns, separated by commas, right after the SELECT keyword. For example:

: SELECT some_column, another_column, amazing_column FROM table_name;

With that syntax, the query will retrieve all rows from just those three columns.

Let's apply this to the teachers table. Perhaps in your analysis you want to focus on teachers' names and salaries, not the school where they work or when they were hired. In that case, you might select only a few columns from the table instead of using the asterisk wildcard. Enter the statement shown in [[file:ch02.xhtml#ch02list2][Listing 2-2]]. Notice that the order of the columns in the query is different than the order in the table: you're able to retrieve columns in any order you'd like.

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT last_name, first_name, salary FROM teachers;
#+end_src

#+RESULTS:
| last_name | first_name | salary |
|-----------+------------+--------|
| Smith     | Janet      |  36200 |
| Reynolds  | Lee        |  65000 |
| Cole      | Samuel     |  43500 |
| Bush      | Samantha   |  36200 |
| Diaz      | Betty      |  43500 |
| Roush     | Kathleen   |  38500 |

/Listing 2-2: Querying a subset of columns/



Although these examples are basic, they illustrate a good strategy for beginning your interview of a data set. Generally, it's wise to start your analysis by checking whether your data is present and in the format you expect. Are dates in a complete month-date-year format, or are they entered (as I once ruefully observed) as text with the month and year only? Does every row have a value? Are there mysteriously no last names starting with letters beyond “M”? All these issues indicate potential hazards ranging from missing data to shoddy recordkeeping somewhere in the workflow.

We're only working with a table of six rows, but when you're facing a table of thousands or even millions of rows, it's essential to get a quick read on your data quality and the range of values it contains. To do this, let's dig deeper and add several SQL keywords.

*** Using DISTINCT to Find Unique Values/


In a table, it's not unusual for a column to contain rows with duplicate values. In the teachers table, for example, the school column lists the same school names multiple times because each school employs many teachers.

To understand the range of values in a column, we can use the DISTINCT keyword as part of a query that eliminates duplicates and shows only unique values. Use the DISTINCT keyword immediately after SELECT, as shown in [[file:ch02.xhtml#ch02list3][Listing 2-3]]:
/Listing 2-3: Querying distinct values in the school column/
#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT DISTINCT school
FROM teachers;
#+end_src

#+RESULTS:
| school              |
|---------------------|
| Myers Middle School |
| F.D. Roosevelt HS   |


Even though six rows are in the table, the output shows just the two unique school names in the school column. This is a helpful first step toward assessing data quality. For example, if a school name is spelled more than one way, those spelling variations will be easy to spot and correct. When you're working with dates or numbers, DISTINCT will help highlight inconsistent or broken formatting. For example, you might inherit a data set in which dates were entered in a column formatted with a text data type. That practice (which you should avoid) allows malformed dates to exist:

date
---------
5/30/2019
6//2019
6/1/2019
6/2/2019

The DISTINCT keyword also works on more than one column at a time. If we add a column, the query returns each unique pair of values. Run the code in [[file:ch02.xhtml#ch02list4][Listing 2-4]]:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT DISTINCT school, salary
FROM teachers;
#+end_src

#+RESULTS:
| school              | salary |
|---------------------+--------|
| Myers Middle School |  36200 |
| F.D. Roosevelt HS   |  65000 |
| Myers Middle School |  43500 |
| F.D. Roosevelt HS   |  38500 |
| F.D. Roosevelt HS   |  36200 |
/Listing 2-4: Querying distinct pairs of values in the school and salary columns/

Now the query returns each unique (or distinct) salary earned at each school. Because two teachers at Myers Middle School earn $43,500, that pair is listed in just one row, and the query returns five rows rather than all six in the table:

This technique gives us the ability to ask, “For each /x/ in the table, what are all the /y/ values?” For each factory, what are all the chemicals it produces? For each election district, who are all the candidates running for office? For each concert hall, who are the artists playing this month?

SQL offers more sophisticated techniques with aggregate functions that let us count, sum, and find minimum and maximum values. I'll cover those in detail in [[file:ch05.xhtml#ch05][Chapter 5]] and [[file:ch08.xhtml#ch08][Chapter 8]].
# 這本書是從原理上闡述.
** Sorting Data with ORDER BY


Data can make more sense, and may reveal patterns more readily, when it's arranged in order rather than jumbled randomly.

In SQL, we order the results of a query using a clause containing the keywords ORDER BY followed by the name of the column or columns to sort. Applying this clause doesn't change the original table, only the result of the query. [[file:ch02.xhtml#ch02list5][Listing 2-5]] shows an example using the teachers table:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT first_name, last_name, salary
FROM teachers
ORDER BY salary DESC;
#+end_src
/Listing 2-5: Sorting a column with ORDER BY/
#+RESULTS:
| first_name | last_name | salary |
|------------+-----------+--------|
| Lee        | Reynolds  |  65000 |
| Samuel     | Cole      |  43500 |
| Betty      | Diaz      |  43500 |
| Kathleen   | Roush     |  38500 |
| Janet      | Smith     |  36200 |
| Samantha   | Bush      |  36200 |



By default, ORDER BY sorts values in ascending order, but here I sort in descending order by adding the DESC keyword. (The optional ASC keyword specifies sorting in ascending order.) Now, by ordering the salary column from highest to lowest, I can determine which teachers earn the most:



*** SORTING TEXT MAY SURPRISE YOU*

Sorting a column of numbers in PostgreSQL yields what you might expect: the data ranked from largest value to smallest or vice versa depending on whether or not you use the DESC keyword. But sorting a column with letters or other characters may return surprising results, especially if it has a mix of uppercase and lowercase characters, punctuation, or numbers that are treated as text.

During PostgreSQL installation, the server is assigned a particular /locale/ for /collation/, or ordering of text, as well as a /character set/. Both are based either on settings in the computer's operating system or custom options supplied during installation. (You can read more about collation in the official PostgreSQL documentation at /[[https://www.postgresql.org/docs/current/static/collation.html]]/.) For example, on my Mac, my PostgreSQL install is set to the locale en_US, or U.S. English, and the character set UTF-8. You can view your server's collation setting by executing the statement SHOW ALL; and viewing the value of the parameter lc_collate.

In a character set, each character gets a numerical value, and the sorting order depends on the order of those values. Based on UTF-8, PostgreSQL sorts characters in this order:

1. Punctuation marks, including quotes, parentheses, and math operators
2. Numbers 0 to 9
3. Additional punctuation, including the question mark
4. Capital letters from A to Z
5. More punctuation, including brackets and underscore
6. Lowercase letters a to z
7. Additional punctuation, special characters, and the extended alphabet

Normally, the sorting order won't be an issue because character columns usually just contain names, places, descriptions, and other straightforward text. But if you're wondering why the word /Ladybug/ appears before /ladybug/ in your sort, you now have an explanation.

The ability to sort in our queries gives us great flexibility in how we view and present data. For example, we're not limited to sorting on just one column. Enter the statement in [[file:ch02.xhtml#ch02list6][Listing 2-6]]:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT last_name, school, hire_date
FROM teachers
ORDER BY school ASC, hire_date DESC;
#+end_src

#+RESULTS:
| last_name | school              |  hire_date |
|-----------+---------------------+------------|
| Smith     | F.D. Roosevelt HS   | 2011-10-30 |
| Roush     | F.D. Roosevelt HS   | 2010-10-22 |
| Reynolds  | F.D. Roosevelt HS   | 1993-05-22 |
| Bush      | Myers Middle School | 2011-10-30 |
| Diaz      | Myers Middle School | 2005-08-30 |
| Cole      | Myers Middle School | 2005-08-01 |

/Listing 2-6: Sorting multiple columns with ORDER BY/

In this case, we're retrieving the last names of teachers, their school, and the date they were hired. By sorting the school column in ascending order and hire_date in descending order ➊, we create a listing of teachers grouped by school with the most recently hired teachers listed first. This shows us who the newest teachers are at each school. The result set should look like this:


You can use ORDER BY on more than two columns, but you'll soon reach a point of diminishing returns where the effect will be hardly noticeable. Imagine if you added columns about teachers' highest college degree attained, the grade level taught, and birthdate to the ORDER BY clause. It would be difficult to understand the various sort directions in the output all at once, much less communicate that to others. Digesting data happens most easily when the result focuses on answering a specific question; therefore, a better strategy is to limit the number of columns in your query to only the most important, and then run several queries to answer each question you have.

** Filtering Rows with WHERE


Sometimes, you'll want to limit the rows a query returns to only those in which one or more columns meet certain criteria. Using teachers as an example, you might want to find all teachers hired before a particular year or all teachers making more than $75,000 at elementary schools. For these tasks, we use the WHERE clause.

The WHERE keyword allows you to find rows that match a specific value, a range of values, or multiple values based on criteria supplied via an /operator/. You also can exclude rows based on criteria.

[[file:ch02.xhtml#ch02list7][Listing 2-7]] shows a basic example. Note that in standard SQL syntax, the WHERE clause follows the FROM keyword and the name of the table or tables being queried:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT last_name, school, hire_date
FROM teachers
WHERE school = 'Myers Middle School';
#+end_src

#+RESULTS:
| last_name | school              |  hire_date |
|-----------+---------------------+------------|
| Cole      | Myers Middle School | 2005-08-01 |
| Bush      | Myers Middle School | 2011-10-30 |
| Diaz      | Myers Middle School | 2005-08-30 |

Listing 2-7: Filtering rows using WHERE/

The result set shows just the teachers assigned to Myers Middle School:


Here, I'm using the equals comparison operator to find rows that exactly match a value, but of course you can use other operators with WHERE to customize your filter criteria. [[file:ch02.xhtml#ch02tab1][Table 2-1]] provides a summary of the most commonly used comparison operators. Depending on your database system, many more might be available.
[[../images/ch02.org_20191206_192824.png]]

The following examples show comparison operators in action. First, we use the equals operator to find teachers whose first name is Janet:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT first_name, last_name, school
FROM teachers
WHERE first_name = 'Janet';
#+end_src

#+RESULTS:
| first_name | last_name | school            |
|------------+-----------+-------------------|
| Janet      | Smith     | F.D. Roosevelt HS |

Next, we list all school names in the table but exclude F.D. Roosevelt HS using the not equal operator:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT school
FROM teachers
WHERE school != 'F.D. Roosevelt HS';
#+end_src

#+RESULTS:
| school              |
|---------------------|
| Myers Middle School |
| Myers Middle School |
| Myers Middle School |

Here we use the less than operator to list teachers hired before January 1, 2000 (using the date format YYYY-MM-DD):

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT first_name, last_name, hire_date
FROM teachers
WHERE hire_date < '2000-01-01';
#+end_src

#+RESULTS:
| first_name | last_name |  hire_date |
|------------+-----------+------------|
| Lee        | Reynolds  | 1993-05-22 |

Then we find teachers who earn $43,500 or more using the >= operator:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT first_name, last_name, salary
FROM teachers
WHERE salary >= 43500;
#+end_src

#+RESULTS:
| first_name | last_name | salary |
|------------+-----------+--------|
| Lee        | Reynolds  |  65000 |
| Samuel     | Cole      |  43500 |
| Betty      | Diaz      |  43500 |

The next query uses the BETWEEN operator to find teachers who earn between $40,000 and $65,000. Note that BETWEEN is /inclusive/, meaning the result will include values matching the start and end ranges specified.

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT first_name, last_name, school, salary
FROM teachers
WHERE salary BETWEEN 40000 AND 65000;
#+end_src

#+RESULTS:
| first_name | last_name | school              | salary |
|------------+-----------+---------------------+--------|
| Lee        | Reynolds  | F.D. Roosevelt HS   |  65000 |
| Samuel     | Cole      | Myers Middle School |  43500 |
| Betty      | Diaz      | Myers Middle School |  43500 |

We'll return to these operators throughout the book, because they'll play a key role in helping us ferret out the data and answers we want to find.
***  Using LIKE and ILIKE with WHERE

Comparison operators are fairly straightforward, but LIKE and ILIKE deserve additional explanation. First, both let you search for patterns in strings by using two special characters:

*Percent sign (%)* A wildcard matching one or more characters

*Underscore (_)* A wildcard matching just one character

For example, if you're trying to find the word baker, the following LIKE patterns will match it:

LIKE 'b%'
LIKE '%ak%'
LIKE '_aker'
LIKE 'ba_er'

The difference? The LIKE operator, which is part of the ANSI SQL standard, is case sensitive. The ILIKE operator, which is a PostgreSQL-only implementation, is case insensitive. [[file:ch02.xhtml#ch02list8][Listing 2-8]] shows how the two keywords give you different results. The first WHERE clause uses LIKE ➊ to find names that start with the characters sam, and because it's case sensitive, it will return zero results. The second, using the case-insensitive ILIKE ➋, will return Samuel and Samantha from the table:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT first_name
FROM teachers
WHERE first_name ILIKE 'sam%';
#+end_src

#+RESULTS:
| first_name |
|------------|
| Samuel     |
| Samantha   |
/Listing 2-8: Filtering with LIKE and ILIKE/

Over the years, I've gravitated toward using ILIKE and wildcard operators in searches to make sure I'm not inadvertently excluding results from searches. I don't assume that whoever typed the names of people, places, products, or other proper nouns always remembered to capitalize them. And if one of the goals of interviewing data is to understand its quality, using a case-insensitive search will help you find variations.

Because LIKE and ILIKE search for patterns, performance on large databases can be slow. We can improve performance using indexes, which I'll cover in [[file:ch07.xhtml#lev113][“Speeding Up Queries with Indexes”]] on [[file:ch07.xhtml#page_108][page 108]].

*** Combining Operators with AND and ORc


Comparison operators become even more useful when we combine them. To do this, we connect them using keywords AND and OR along with, if needed, parentheses.

The statements in [[file:ch02.xhtml#ch02list9][Listing 2-9]] show three examples that combine operators this way:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT *
FROM teachers
WHERE school = 'Myers Middle School'
AND salary < 40000;

SELECT *
FROM teachers
WHERE last_name = 'Cole'
OR last_name = 'Bush';

SELECT *
FROM teachers
WHERE school = 'F.D. Roosevelt HS'
AND (salary < 38000 OR salary > 40000);
#+end_src

#+RESULTS:
| id | first_name | last_name | school              |  hire_date | salary |
|----+------------+-----------+---------------------+------------+--------|
|  4 | Samantha   | Bush      | Myers Middle School | 2011-10-30 |  36200 |
| id | first_name | last_name | school              |  hire_date | salary |
|  3 | Samuel     | Cole      | Myers Middle School | 2005-08-01 |  43500 |
|  4 | Samantha   | Bush      | Myers Middle School | 2011-10-30 |  36200 |
| id | first_name | last_name | school              |  hire_date | salary |
|  1 | Janet      | Smith     | F.D. Roosevelt HS   | 2011-10-30 |  36200 |
|  2 | Lee        | Reynolds  | F.D. Roosevelt HS   | 1993-05-22 |  65000 |

/Listing 2-9: Combining operators using AND and OR/

The first query uses AND in the WHERE clause ➊ to find teachers who work at Myers Middle School and have a salary less than $40,000. Because we connect the two conditions using AND, both must be true for a row to meet the criteria in the WHERE clause and be returned in the query results.

The second example uses OR ➋ to search for any teacher whose last name matches Cole or Bush. When we connect conditions using OR, only one of the conditions must be true for a row to meet the criteria of the WHERE clause.

The final example looks for teachers at Roosevelt whose salaries are either less than $38,000 or greater than $40,000 ➌. When we place statements inside parentheses, those are evaluated as a group before being combined with other criteria. In this case, the school name must be exactly F.D. Roosevelt HS and the salary must be either less or higher than specified for a row to meet the criteria of the WHERE clause.

** Putting It All Together


You can begin to see how even the previous simple queries allow us to delve into our data with flexibility and precision to find what we're looking for. You can combine comparison operator statements using the AND and OR keywords to provide multiple criteria for filtering, and you can include an ORDER BY clause to rank the results.

With the preceding information in mind, let's combine the concepts in this chapter into one statement to show how they fit together. SQL is particular about the order of keywords, so follow this convention:

SELECT column_names
FROM table_name
WHERE criteria
ORDER BY column_names;

[[file:ch02.xhtml#ch02list10][Listing 2-10]] shows a query against the teachers table that includes all the aforementioned pieces:

SELECT first_name, last_name, school, hire_date, salary
FROM teachers
WHERE school LIKE '%Roos%'
ORDER BY hire_date DESC;

/Listing 2-10: A SELECT statement including WHERE and ORDER BY/

This listing returns teachers at Roosevelt High School, ordered from newest hire to earliest. We can see a clear correlation between a teacher's hire date at the school and his or her current salary level:

[[../images/prog_page_21.jpg]]

** Wrapping Up
# 綜上,還是sql in 10 minutes更加系統.

Now that you've learned the basic structure of a few different SQL queries, you've acquired the foundation for many of the additional skills I'll cover in later chapters. Sorting, filtering, and choosing only the most important columns from a table can yield a surprising amount of information from your data and help you find the story it tells.

In the next chapter, you'll learn about another foundational aspect of SQL: data types.


*TRY IT YOURSELF*

Explore basic queries with these exercises:

1. The school district superintendent asks for a list of teachers in each school. Write a query that lists the schools in alphabetical order along with teachers ordered by last name A--Z.

2. Write a query that finds the one teacher whose first name starts with the letter S and who earns more than $40,000.

3. Rank teachers hired since January 1, 2010, ordered by highest paid to lowest.


the basic structure of a few different SQL queries, you've acquired the foundation for many of the additional skills I'll cover in later chapters. Sorting, filtering, and choosing only the most important columns from a table can yield a surprising amount of information from your data and help you find the story it tells.

In the next chapter, you'll learn about another foundational aspect of SQL: data types.


*TRY IT YOURSELF*

Explore basic queries with these exercises:

1. The school district superintendent asks for a list of teachers in each school. Write a query that lists the schools in alphabetical order along with teachers ordered by last name A--Z.

2. Write a query that finds the one teacher whose first name starts with the letter S and who earns more than $40,000.

3. Rank teachers hired since January 1, 2010, ordered by highest paid to lowest.


, ordered by highest paid to lowest.


