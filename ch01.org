* 1. Creating Your First Database And Table
** Pre


SQL is more than just a means for extracting knowledge from data. It's also a language for /defining/ the structures that hold data so we can organize /relationships/ in the data. Chief among those structures is the table.

A table is a grid of rows and columns that store data. Each row holds a collection of columns, and each column contains data of a specified type: most commonly, numbers, characters, and dates. We use SQL to define the structure of a table and how each table might relate to other tables in the database. We also use SQL to extract, or /query/, data from tables.

Understanding tables is fundamental to understanding the data in your database. Whenever I start working with a fresh database, the first thing I do is look at the tables within. I look for clues in the table names and their column structure. Do the tables contain text, numbers, or both? How many rows are in each table?

Next, I look at how many tables are in the database. The simplest database might have a single table. A full-bore application that handles customer data or tracks air travel might have dozens or hundreds. The number of tables tells me not only how much data I'll need to analyze, but also hints that I should explore relationships among the data in each table.

Before you dig into SQL, let's look at an example of what the contents of tables might look like. We'll use a hypothetical database for managing a school's class enrollment; within that database are several tables that track students and their classes. The first table, called student_enrollment, shows the students that are signed up for each class section:

student_id    class_id      class_section    semester
----------    ----------    -------------    ---------
CHRISPA004    COMPSCI101    3                Fall 2017
DAVISHE010    COMPSCI101    3                Fall 2017
ABRILDA002    ENG101        40               Fall 2017
DAVISHE010    ENG101        40               Fall 2017
RILEYPH002    ENG101        40               Fall 2017

This table shows that two students have signed up for COMPSCI101, and three have signed up for ENG101. But where are the details about each student and class? In this example, these details are stored in separate tables called students and classes, and each table relates to this one. This is where the power of a /relational database/ begins to show itself.

The first several rows of the students table include the following:

student_id    first_name    last_name    dob       
----------    ----------    ---------    ----------
ABRILDA002    Abril         Davis        1999-01-10
CHRISPA004    Chris         Park         1996-04-10
DAVISHE010    Davis         Hernandez    1987-09-14
RILEYPH002    Riley         Phelps       1996-06-15

The students table contains details on each student, using the value in the student_id column to identify each one. That value acts as a unique /key/ that connects both tables, giving you the ability to create rows such as the following with the class_id column from student_enrollment and the first_name and last_name columns from students:

class_id      first_name    last_name
----------    ----------    ---------
COMPSCI101    Davis         Hernandez
COMPSCI101    Chris         Park
ENG101        Abril         Davis
ENG101        Davis         Hernandez
ENG101        Riley         Phelps

The classes table would work the same way, with a class_id column and several columns of detail about the class. Database builders prefer to organize data using separate tables for each main /entity/ the database manages in order to reduce redundant data. In the example, we store each student's name and date of birth just once. Even if the student signs up for multiple classes---as Davis Hernandez did---we don't waste database space entering his name next to each class in the student_enrollment table. We just include his student ID.

Given that tables are a core building block of every database, in this chapter you'll start your SQL coding adventure by creating a table inside a new database. Then you'll load data into the table and view the completed table.

** Creating a Database


The PostgreSQL program you downloaded in the Introduction is a /database management system/, a software package that allows you to define, manage, and query databases. When you installed PostgreSQL, it created a /database server/---an instance of the application running on your computer---that includes a default database called postgres. The database is a collection of objects that includes tables, functions, user roles, and much more. According to the PostgreSQL documentation, the default database is “meant for use by users, utilities and third party applications” (see /[[https://www.postgresql.org/docs/current/static/app-initdb.html]]/). In the exercises in this chapter, we'll leave the default as is and instead create a new one. We'll do this to keep objects related to a particular topic or application organized together.

To create a database, you use just one line of SQL, shown in [[file:ch01.xhtml#ch01list1][Listing 1-1]]. This code, along with all the examples in this book, is available for download via the resources at /[[https://www.nostarch.com/practicalSQL/]]./

#+begin_src sql :engine postgresql :dbuser postgres  :dbpassword 1618
CREATE DATABASE analysis;
#+end_src

#+begin_src sql :engine postgresql :dbuser postgres  :dbpassword 1618
grant all privileges on database analysis to org;
#+end_src

#+RESULTS:
| GRANT |
|-------|

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
\list
#+end_src



#+begin_src sql :engine mysql :dbuser org :database grocer

#+end_src
/Listing 1-1: Creating a database named analysis/

This statement creates a database on your server named analysis using default PostgreSQL settings. Note that the code consists of two keywords---CREATE and DATABASE---followed by the name of the new database. The statement ends with a semicolon, which signals the end of the command. The semicolon ends all PostgreSQL statements and is part of the ANSI SQL standard. Sometimes you can omit the semicolon, but not always, and particularly not when running multiple statements in the admin. So, using the semicolon is a good habit to form.

** Creating a Table


As I mentioned earlier, tables are where data lives and its relationships are defined. When you create a table, you assign a name to each /column/ (sometimes referred to as a /field/ or /attribute/) and assign it a /data type/. These are the values the column will accept---such as text, integers, decimals, and dates---and the definition of the data type is one way SQL enforces the integrity of data. For example, a column defined as date will take data in one of several standard formats, such as YYYY-MM-DD. If you try to enter characters not in a date format, for instance, the word peach, you'll receive an error.

Data stored in a table can be accessed and analyzed, or queried, with SQL statements. You can sort, edit, and view the data, and easily alter the table later if your needs change.

Let's make a table in the analysis database.
*** The CREATE TABLE Statement

For this exercise, we'll use an often-discussed piece of data: teacher salaries. [[file:ch01.xhtml#ch01list2][Listing 1-2]] shows the SQL statement to create a table called Teachers:

➊ CREATE TABLE teachers (
    ➋ id bigserial,
    ➌ first_name varchar(25),
       last_name varchar(50),
       school varchar(50),
    ➍ hire_date date,
    ➎ salary numeric
➏ );
#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
CREATE TABLE teachers (
    id bigserial,
    first_name varchar(25),
    last_name varchar(50),
    school varchar(50),
    hire_date date,
    salary numeric
);
#+end_src
/Listing 1-2: Creating a table named teachers with six columns/

This table definition is far from comprehensive. For example, it's missing several /constraints/ that would ensure that columns that must be filled do indeed have data or that we're not inadvertently entering duplicate values. I cover constraints in detail in [[file:ch07.xhtml#ch07][Chapter 7]], but in these early chapters I'm omitting them to focus on getting you started on exploring data.

The code begins with the two SQL keywords ➊ CREATE and TABLE that, together with the name teachers, signal PostgreSQL that the next bit of code describes a table to add to the database. Following an opening parenthesis, the statement includes a comma-separated list of column names along with their data types. For style purposes, each new line of code is on its own line and indented four spaces, which isn't required, but it makes the code more readable.

Each column name represents one discrete data element defined by a data type. The id column ➋ is of data type big serial, a special integer type that auto-increments every time you add a row to the table. The first row receives the value of 1 in the id column, the second row 2, and so on. The bigserial data type and other serial types are PostgreSQL-specific implementations, but most database systems have a similar feature.

Next, we create columns for the teacher's first and last name, and the school where they teach ➌. Each is of the data type varchar, a text column with a maximum length specified by the number in parentheses. We're assuming that no one in the database will have a last name of more than 50 characters. Although this is a safe assumption, you'll discover over time that exceptions will always surprise you.

The teacher's hire_date ➍ is set to the data type date, and the salary column ➎ is a numeric. I'll cover data types more thoroughly in [[file:ch03.xhtml#ch03][Chapter 3]], but this table shows some common examples of data types. The code block wraps up ➏ with a closing parenthesis and a semicolon.

Now that you have a sense of how SQL looks, let's run this code in pgAdmin.

** Inserting Rows into a Table


You can add data to a PostgreSQL table in several ways. Often, you'll work with a large number of rows, so the easiest method is to import data from a text file or another database directly into a table. But just to get started, we'll add a few rows using an INSERT INTO ... VALUES statement that specifies the target columns and the data values. Then we'll view the data in its new home.

*** The INSERT Statement


To insert some data into the table, you first need to erase the CREATE TABLE statement you just ran. Then, following the same steps as you did to create the database and table, copy the code in [[file:ch01.xhtml#ch01list3][Listing 1-3]] into your pgAdmin Query Tool:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
INSERT INTO teachers (first_name, last_name, school, hire_date, salary)
VALUES ('Janet', 'Smith', 'F.D. Roosevelt HS', '2011-10-30', 36200),
       ('Lee', 'Reynolds', 'F.D. Roosevelt HS', '1993-05-22', 65000),
       ('Samuel', 'Cole', 'Myers Middle School', '2005-08-01', 43500),
       ('Samantha', 'Bush', 'Myers Middle School', '2011-10-30', 36200),
       ('Betty', 'Diaz', 'Myers Middle School', '2005-08-30', 43500),
       ('Kathleen', 'Roush', 'F.D. Roosevelt HS', '2010-10-22', 38500);
#+end_src

#+RESULTS:
| INSERT 0 6 |
|------------|
Listing 1-3: Inserting data into the teachers table/

This code block inserts names and data for six teachers. Here, the PostgreSQL syntax follows the ANSI SQL standard: after the INSERT INTO keywords is the name of the table, and in parentheses are the columns to be filled ➊. In the next row is the VALUES keyword and the data to insert into each column in each row ➋. You need to enclose the data for each row in a set of parentheses, and inside each set of parentheses, use a comma to separate each column value. The order of the values must also match the order of the columns specified after the table name. Each row of data ends with a comma, and the last row ends the entire statement with a semicolon ➌.

Notice that certain values that we're inserting are enclosed in single quotes, but some are not. This is a standard SQL requirement. Text and dates require quotes; numbers, including integers and decimals, don't require quotes. I'll highlight this requirement as it comes up in examples. Also, note the date format we're using: a four-digit year is followed by the month and date, and each part is joined by a hyphen. This is the international standard for date formats; using it will help you avoid confusion. (Why is it best to use the format YYYY-MM-DD? Check out /[[https://xkcd.com/1179/]]/ to see a great comic about it.) PostgreSQL supports many additional date formats, and I'll use several in examples.

You might be wondering about the id column, which is the first column in the table. When you created the table, your script specified that column to be the bigserial data type. So as PostgreSQL inserts each row, it automatically fills the id column with an auto-incrementing integer. I'll cover that in detail in [[file:ch03.xhtml#ch03][Chapter 3]] when I discuss data types.

Now, run the code. This time the message in the Query Tool should include the words Query returned successfully: 6 rows affected.

*** Viewing the Data

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
select * from teachers
order by hire_date desc
limit 3;
#+end_src

#+RESULTS:
| id | first_name | last_name | school              |  hire_date | salary |
|----+------------+-----------+---------------------+------------+--------|
|  1 | Janet      | Smith     | F.D. Roosevelt HS   | 2011-10-30 |  36200 |
|  4 | Samantha   | Bush      | Myers Middle School | 2011-10-30 |  36200 |
|  6 | Kathleen   | Roush     | F.D. Roosevelt HS   | 2010-10-22 |  38500 |

** When Code Goes Bad

There may be a universe where code always works, but unfortunately, we haven't invented a machine capable of transporting us there. Errors happen. Whether you make a typo or mix up the order of operations, computer languages are unforgiving about syntax. For example, if you forget a comma in the code in [[file:ch01.xhtml#ch01list3][Listing 1-3]], PostgreSQL squawks back an error:

ERROR:  syntax error at or near "("
LINE 5:     ('Samuel', 'Cole', 'Myers Middle School', '2005-08-01', 43...
            ^
 Error 

Fortunately, the error message hints at what's wrong and where: a syntax error is near an open parenthesis on line 5. But sometimes error messages can be more obscure. In that case, you do what the best coders do: a quick internet search for the error message. Most likely, someone else has experienced the same issue and might know the answer.

** Formatting SQL for Readability

SQL requires no special formatting to run, so you're free to use your own psychedelic style of uppercase, lowercase, and random indentations. But that won't win you any friends when others need to work with your code (and sooner or later someone will). For the sake of readability and being a good coder, it's best to follow these conventions:

1) Uppercase SQL keywords, such as SELECT. Some SQL coders also uppercase the names of data types, such as TEXT and INTEGER. I use lowercase characters for data types in this book to separate them in your mind from keywords, but you can uppercase them if desired.
2) Avoid camel case and instead use lowercase_and_underscores for object names, such as tables and column names (see more details about case in [[file:ch07.xhtml#ch07][Chapter 7]]).
3) Indent clauses and code blocks for readability using either two or four spaces. Some coders prefer tabs to spaces; use whichever works best for you or your organization.

We'll explore other SQL coding conventions as we go through the book, but these are the basics.

** Wrapping Up


You accomplished quite a bit in this first chapter: you created a database and a table, and then loaded data into it. You're on your way to adding SQL to your data analysis toolkit! In the next chapter, you'll use this set of teacher data to learn the basics of querying a table using SELECT.


*TRY IT YOURSELF*

Here are two exercises to help you explore concepts related to databases, tables, and data relationships:

1. Imagine you're building a database to catalog all the animals at your local zoo. You want one table to track the kinds of animals in the collection and another table to track the specifics on each animal. Write CREATE TABLE statements for each table that include some of the columns you need. Why did you include the columns you chose?

2. Now create INSERT statements to load sample data into the tables. How can you view the data via the pgAdmin tool? Create an additional INSERT statement for one of your tables. Purposely omit one of the required commas separating the entries in the VALUES clause of the query. What is the error message? Would it help you find the error in the code?


nto it. You're on your way to adding SQL to your data analysis toolkit! In the next chapter, you'll use this set of teacher data to learn the basics of querying a table using SELECT.


*TRY IT YOURSELF*

Here are two exercises to help you explore concepts related to databases, tables, and data relationships:

1. Imagine you're building a database to catalog all the animals at your local zoo. You want one table to track the kinds of animals in the collection and another table to track the specifics on each animal. Write CREATE TABLE statements for each table that include some of the columns you need. Why did you include the columns you chose?

2. Now create INSERT statements to load sample data into the tables. How can you view the data via the pgAdmin tool? Create an additional INSERT statement for one of your tables. Purposely omit one of the required commas separating the entries in the VALUES clause of the query. What is the error message? Would it help you find the error in the code?


 is the error message? Would it help you find the error in the code?


