* 6.Joining Tables In A Relational Database

In [[file:ch01.xhtml#ch01][Chapter 1]], I introduced the concept of a relational database, an application that supports data stored across multiple, related tables. In a relational model, each table typically holds data on one entity---such as students, cars, purchases, houses---and each row in the table describes one of those entities. A process known as a /table join/ allows us to link rows in one table to rows in other tables.

The concept of relational databases came from the British computer scientist Edgar F. Codd. While working for IBM in 1970, he published a paper called “A Relational Model of Data for Large Shared Data Banks.” His ideas revolutionized database design and led to the development of SQL. Using the relational model, you can build tables that eliminate duplicate data, are easier to maintain, and provide for increased flexibility in writing queries to get just the data you want.

** Linking Tables Using JOIN

To connect tables in a query, we use a JOIN ... ON statement (or one of the other JOIN variants I'll cover in this chapter). The JOIN statement links one table to another in the database during a query, using matching values in columns we specify in both tables. The syntax takes this form:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT *
FROM table_a JOIN table_b
ON table_a.key_column = table_b.foreign_key_column
#+end_src

This is similar to the basic SELECT syntax you've already learned, but instead of naming one table in the FROM clause, we name a table, give the JOIN keyword, and then name a second table. The ON keyword follows, where we specify the columns we want to use to match values. When the query runs, it examines both tables and then returns columns from both tables where the values match in the columns specified in the ON clause.

Matching based on equality between values is the most common use of the ON clause, but you can use any expression that evaluates to the /Boolean/ results true or false. For example, you could match where values from one column are greater than or equal to values in the other:

: ON table_a.key_column >= table_b.foreign_key_column
# 有点意思
That's rare, but it's an option if your analysis requires it.

** Relating Tables with Key Columns

Consider this example of relating tables with key columns: imagine you're a data analyst with the task of checking on a public agency's payroll spending by department. You file a Freedom of Information Act request for that agency's salary data, expecting to receive a simple spreadsheet listing each employee and their salary, arranged like this:

dept    location    first_name    last_name    salary
----    --------    ----------    ---------    ------
Tax     Atlanta     Nancy         Jones        62500
Tax     Atlanta     Lee           Smith        59300
IT      Boston      Soo           Nguyen       83000
IT      Boston      Janet         King         95000

But that's not what arrives. Instead, the agency sends you a data dump from its payroll system: a dozen CSV files, each representing one table in its database. You read the document explaining the data layout (be sure to always ask for it!) and start to make sense of the columns in each table. Two of the tables stand out: one named employees and another named departments.

Using the code in [[file:ch06.xhtml#ch06list1][Listing 6-1]], let's create versions of these tables, insert rows, and examine how to join the data in both tables. Using the analysis database you've created for these exercises, run all the code, and then look at the data either by using a basic SELECT statement or clicking the table name in pgAdmin and selecting *View/Edit Data ▸ All Rows*.

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis

-- Listing 6-1: Creating the departments and employees tables

CREATE TABLE departments (
    dept_id bigserial,
    dept varchar(100),
    city varchar(100),
    CONSTRAINT dept_key PRIMARY KEY (dept_id),
    CONSTRAINT dept_city_unique UNIQUE (dept, city) -- 关键词
);

CREATE TABLE employees (
    emp_id bigserial,
    first_name varchar(100),
    last_name varchar(100),
    salary integer,
    dept_id integer REFERENCES departments (dept_id),
    CONSTRAINT emp_key PRIMARY KEY (emp_id),
    CONSTRAINT emp_dept_unique UNIQUE (emp_id, dept_id)
);

INSERT INTO departments (dept, city)
VALUES
    ('Tax', 'Atlanta'),
    ('IT', 'Boston');

INSERT INTO employees (first_name, last_name, salary, dept_id)
VALUES
    ('Nancy', 'Jones', 62500, 1),
    ('Lee', 'Smith', 59300, 1),
    ('Soo', 'Nguyen', 83000, 2),
    ('Janet', 'King', 95000, 2);
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|
| CREATE TABLE |
| INSERT 0 2   |
| INSERT 0 4   |


The two tables follow Codd's relational model in that each describes attributes about a single entity, in this case the agency's departments and employees. In the departments table, you should see the following contents:

dept_id    dept    city
-------    ----    -------
      1    Tax     Atlanta
      2    IT      Boston

The dept_id column is the table's primary key. A /primary key/ is a column or collection of columns whose values uniquely identify each row in a table. A valid primary key column enforces certain constraints:

1) The column or collection of columns must have a unique value for each row.
2) The column or collection of columns can't have missing values.

You define the primary key for departments ➊ and employees ➍ using a CONSTRAINT keyword, which I'll cover in depth with additional constraint types in [[file:ch07.xhtml#ch07][Chapter 7]]. The dept_id column uniquely identifies the department, and although this example contains only a department name and city, such a table would likely include additional information, such as an address or contact information.

The employees table should have the following contents:

emp_id    first_name    last_name    salary    dept_id
------    ----------    ---------    ------    -------
     1    Nancy         Jones        62500           1
     2    Lee           Smith        59300           1
     3    Soo           Nguyen       83000           2
     4    Janet         King         95000           2

The emp_id column uniquely identifies each row in the employees table. For you to know which department each employee works in, the table includes a dept_id column. The values in this column refer to values in the departments table's primary key. We call this a /foreign key/, which you add as a constraint ➌ when creating the table. A foreign key constraint requires a value entered in a column to already exist in the primary key of the table it references. So, values in dept_id in the employees table must exist in dept_id in the departments table; otherwise, you can't add them. Unlike a primary key, a foreign key column can be empty, and it can contain duplicate values.

In this example, the dept_id associated with the employee Nancy Jones is 1; this refers to the value of 1 in the departments table's primary key, dept_id. That tells us that Nancy Jones is part of the Tax department located in Atlanta.

*NOTE*

/Primary key values only need to be unique within a table. That's why it's okay for both the employees table and the departments table to have primary key values using the same numbers./

Both tables also include a UNIQUE constraint, which I'll also discuss in more depth in “The UNIQUE Constraint” on [[file:ch07.xhtml#page_105][page 105]]. Briefly, it guarantees that values in a column, or a combination of values in more than one column, are unique. In departments, it requires that each row have a unique pair of values for dept and city ➋. In employees, each row must have a unique pair of emp_id and dept_id ➎. You add these constraints to avoid duplicate data. For example, you can't have two tax departments in Atlanta.

You might ask: what is the advantage of breaking apart data into components like this? Well, consider what this sample of data would look like if you had received it the way you initially thought you would, all in one table:

dept    location    first_name    last_name    salary
----    --------    ----------    ---------    ------
Tax     Atlanta     Nancy         Jones        62500
Tax     Atlanta     Lee           Smith        59300
IT      Boston      Soo           Nguyen       83000
IT      Boston      Janet         King         95000

First, when you combine data from various entities in one table, inevitably you have to repeat information. This happens here: the department name and location is spelled out for each employee. This is fine when the table consists of four rows like this, or even 4,000. But when a table holds millions of rows, repeating lengthy strings is redundant and wastes precious space.

Second, cramming unrelated data into one table makes managing the data difficult. What if the Marketing department changes its name to Brand Marketing? Each row in the table would require an update. It's simpler to store department names and locations in just one table and update it only once.

Now that you know the basics of how tables can relate, let's look at how to join them in a query.

** Querying Multiple Tables Using JOIN


When you join tables in a query, the database connects rows in both tables where the columns you specified for the join have matching values. The query results then include columns from both tables if you requested them as part of the query. You also can use columns from the joined tables to filter results using a WHERE clause.

Queries that join tables are similar in syntax to basic SELECT statements. The difference is that the query also specifies the following:

- The tables and columns to join, using a SQL JOIN ... ON statement
- The type of join to perform using variations of the JOIN keyword

Let's look at the overall JOIN ... ON syntax first and then explore various types of joins. To join the example employees and departments tables and see all related data from both, start by writing a query like the one in [[file:ch06.xhtml#ch06list2][Listing 6-2]]:

➊ SELECT *
➋ FROM employees JOIN departments
➌ ON employees.dept_id = departments.dept_id;
Listing 6-2: Joining the employees and departments tables/

In the example, you include an asterisk wildcard with the SELECT statement to choose all columns from both tables ➊. Next, the JOIN keyword ➋ goes between the two tables you want data from. Finally, you specify the columns to join the tables using the ON keyword ➌. For each table, you provide the table name, a period, and the column that contains the key values. An equal sign goes between the two table and column names.

When you run the query, the results include all values from both tables where values in the dept_id columns match. In fact, even the dept_id field appears twice because you selected all columns of both tables:

[[./prac-images/prog_page_78.jpg]]

So, even though the data lives in two tables, each with a focused set of columns, you can query those tables to pull the relevant data back together. In [[file:ch06.xhtml#lev94][“Selecting Specific Columns in a Join”]] on [[file:ch06.xhtml#page_85][page 85]], I'll show you how to retrieve only the columns you want from both tables.

** JOIN Types


There's more than one way to join tables in SQL, and the type of join you'll use depends on how you want to retrieve data. The following list describes the different types of joins. While reviewing each, it's helpful to think of two tables side by side, one on the left of the JOIN keyword and the other on the right. A data-driven example of each join follows the list:

1) JOIN Returns rows from both tables where matching values are found in the joined columns of both tables. Alternate syntax is INNER JOIN.

2) LEFT JOIN Returns every row from the left table plus rows that match values in the joined column from the right table. When a left table row doesn't have a match in the right table, the result shows no values from the right table.

3) RIGHT JOIN Returns every row from the right table plus rows that match the key values in the key column from the left table. When a right table row doesn't have a match in the left table, the result shows no values from the left table.

4) FULL OUTER JOIN Returns every row from both tables and matches rows; then joins the rows where values in the joined columns match. If there's no match for a value in either the left or right table, the query result contains an empty row for the other table.

5) CROSS JOIN Returns every possible combination of rows from both tables.

These join types are best illustrated with data. Say you have two simple tables that hold names of schools. To better visualize join types, let's call the tables schools_left and schools_right. There are four rows in schools_left:

id    left_school
--    ------------------------
 1    Oak Street School
 2    Roosevelt High School
 5    Washington Middle School
 6    Jefferson High School

There are five rows in schools_right:

id    right_school
--    ---------------------
 1    Oak Street School
 2    Roosevelt High School
 3    Morrison Elementary
 4    Chase Magnet Academy
 6    Jefferson High School

Notice that only schools with the id of 1, 2, and 6 match in both tables. Working with two tables of similar data is a common scenario for a data analyst, and a common task would be to identify which schools exist in both tables. Using different joins can help you find those schools, plus other details.

Again using your analysis database, run the code in [[file:ch06.xhtml#ch06list3][Listing 6-3]] to build and populate these two tables:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-3: Creating two tables to explore JOIN types

CREATE TABLE schools_left (
    id integer CONSTRAINT left_id_key PRIMARY KEY,
    left_school varchar(30)
);

CREATE TABLE schools_right (
    id integer CONSTRAINT right_id_key PRIMARY KEY,
    right_school varchar(30)
);

INSERT INTO schools_left (id, left_school) VALUES
    (1, 'Oak Street School'),
    (2, 'Roosevelt High School'),
    (5, 'Washington Middle School'),
    (6, 'Jefferson High School');

INSERT INTO schools_right (id, right_school) VALUES
    (1, 'Oak Street School'),
    (2, 'Roosevelt High School'),
    (3, 'Morrison Elementary'),
    (4, 'Chase Magnet Academy'),
    (6, 'Jefferson High School');
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|
| CREATE TABLE |
| INSERT 0 4   |
| INSERT 0 5   |


We create and fill two tables: the declarations for these should by now look familiar, but there's one new element: we add a primary key to each table. After the declaration for the schools_left id column ➊ and schools_right id column, ➋ the keywords CONSTRAINT key_name PRIMARY KEY indicate that those columns will serve as the primary key for their table. That means for each row in both tables, the id column must be filled and contain a value that is unique for each row in that table. Finally, we use the familiar INSERT statements ➌ to add the data to the tables.

*** JOIN/


We use JOIN, or INNER JOIN, when we want to return rows that have a match in the columns we used for the join. To see an example of this, run the code in [[file:ch06.xhtml#ch06list4][Listing 6-4]], which joins the two tables you just made:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-4: Using JOIN

SELECT *
FROM schools_left JOIN schools_right
ON schools_left.id = schools_right.id;
#+end_src

#+RESULTS:
| id | left_school           | id | right_school          |
|----+-----------------------+----+-----------------------|
|  1 | Oak Street School     |  1 | Oak Street School     |
|  2 | Roosevelt High School |  2 | Roosevelt High School |
|  6 | Jefferson High School |  6 | Jefferson High School |

Similar to the method we used in [[file:ch06.xhtml#ch06list2][Listing 6-2]], we specify the two tables to join around the JOIN keyword. Then we specify which columns we're joining on, in this case the id columns of both tables. Three school IDs match in both tables, so JOIN returns only the three rows of those IDs that match. Schools that exist only in one of the two tables don't appear in the result. Notice also that the columns from the left table display on the left of the result table:


When should you use JOIN? Typically, when you're working with well-structured, well-maintained data sets and only need to find rows that exist in all the tables you're joining. Because JOIN doesn't provide rows that exist in only one of the tables, if you want to see all the data in one or more of the tables, use one of the other join types.

*** LEFT JOIN and RIGHT JOIN/


In contrast to JOIN, the LEFT JOIN and RIGHT JOIN keywords each return all rows from one table and display blank rows from the other table if no matching values are found in the joined columns. Let's look at LEFT JOIN in action first. Execute the code in [[file:ch06.xhtml#ch06list5][Listing 6-5]]:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-5: Using LEFT JOIN

SELECT *
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id;
#+end_src

#+RESULTS:
| id | left_school              | id | right_school          |
|----+--------------------------+----+-----------------------|
|  1 | Oak Street School        |  1 | Oak Street School     |
|  2 | Roosevelt High School    |  2 | Roosevelt High School |
|  5 | Washington Middle School |    |                       |
|  6 | Jefferson High School    |  6 | Jefferson High School |

The result of the query shows all four rows from schools_left as well as the three rows in schools_right where the id fields matched. Because schools_right doesn't contain a value of 5 in its right_id column, there's no match, so LEFT JOIN shows an empty row on the right rather than omitting the entire row from the left table as with JOIN. The rows from schools_right that don't match any values in schools_left are omitted from the results:


We see similar but opposite behavior by running RIGHT JOIN, as in [[file:ch06.xhtml#ch06list6][Listing 6-6]]:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-6: Using RIGHT JOIN

SELECT *
FROM schools_left RIGHT JOIN schools_right
ON schools_left.id = schools_right.id;
#+end_src

#+RESULTS:
| id | left_school           | id | right_school          |
|----+-----------------------+----+-----------------------|
|  1 | Oak Street School     |  1 | Oak Street School     |
|  2 | Roosevelt High School |  2 | Roosevelt High School |
|    |                       |  3 | Morrison Elementary   |
|    |                       |  4 | Chase Magnet Academy  |
|  6 | Jefferson High School |  6 | Jefferson High School |

This time, the query returns all rows from schools_right plus rows from schools_left where the id columns have matching values, but the query doesn't return the rows of schools_left that don't have a match with schools_right:

You'd use either of these join types in a few circumstances:

1) You want your query results to contain all the rows from one of the tables.
2) You want to look for missing values in one of the tables; for example, when you're comparing data about an entity representing two different time periods.
3) When you know some rows in a joined table won't have matching values.

*** FULL OUTER JOIN


When you want to see all rows from both tables in a join, regardless of whether any match, use the FULL OUTER JOIN option. To see it in action, run [[file:ch06.xhtml#ch06list7][Listing 6-7]]:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis

-- Listing 6-7: Using FULL OUTER JOIN

SELECT *
FROM schools_left FULL OUTER JOIN schools_right
ON schools_left.id = schools_right.id;
#+end_src

#+RESULTS:
| id | left_school              | id | right_school          |
|----+--------------------------+----+-----------------------|
|  1 | Oak Street School        |  1 | Oak Street School     |
|  2 | Roosevelt High School    |  2 | Roosevelt High School |
|  5 | Washington Middle School |    |                       |
|  6 | Jefferson High School    |  6 | Jefferson High School |
|    |                          |  4 | Chase Magnet Academy  |
|    |                          |  3 | Morrison Elementary   |

The result gives every row from the left table, including matching rows and blanks for missing rows from the right table, followed by any leftover missing rows from the right table:

A full outer join is admittedly less useful and used less often than inner and left or right joins. Still, you can use it for a couple of tasks: to merge two data sources that partially overlap or to visualize the degree to which the tables share matching values.

*** CROSS JOIN/


In a CROSS JOIN query, the result (also known as a /Cartesian product/) lines up each row in the left table with each row in the right table to present all possible combinations of rows. [[file:ch06.xhtml#ch06list8][Listing 6-8]] shows the CROSS JOIN syntax; because the join doesn't need to find matches between key fields, there's no need to provide the clause using the ON keyword.

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-8: Using CROSS JOIN

SELECT *
FROM schools_left CROSS JOIN schools_right;
#+end_src

#+RESULTS:
| id | left_school              | id | right_school          |
|----+--------------------------+----+-----------------------|
|  1 | Oak Street School        |  1 | Oak Street School     |
|  1 | Oak Street School        |  2 | Roosevelt High School |
|  1 | Oak Street School        |  3 | Morrison Elementary   |
|  1 | Oak Street School        |  4 | Chase Magnet Academy  |
|  1 | Oak Street School        |  6 | Jefferson High School |
|  2 | Roosevelt High School    |  1 | Oak Street School     |
|  2 | Roosevelt High School    |  2 | Roosevelt High School |
|  2 | Roosevelt High School    |  3 | Morrison Elementary   |
|  2 | Roosevelt High School    |  4 | Chase Magnet Academy  |
|  2 | Roosevelt High School    |  6 | Jefferson High School |
|  5 | Washington Middle School |  1 | Oak Street School     |
|  5 | Washington Middle School |  2 | Roosevelt High School |
|  5 | Washington Middle School |  3 | Morrison Elementary   |
|  5 | Washington Middle School |  4 | Chase Magnet Academy  |
|  5 | Washington Middle School |  6 | Jefferson High School |
|  6 | Jefferson High School    |  1 | Oak Street School     |
|  6 | Jefferson High School    |  2 | Roosevelt High School |
|  6 | Jefferson High School    |  3 | Morrison Elementary   |
|  6 | Jefferson High School    |  4 | Chase Magnet Academy  |
|  6 | Jefferson High School    |  6 | Jefferson High School |

The result has 20 rows---the product of four rows in the left table times five rows in the right:

Unless you want to take an extra-long coffee break, I'd suggest avoiding a CROSS JOIN query on large tables. Two tables with 250,000 records each would produce a result set of 62.5 /billion/ rows and tax even the hardiest server. A more practical use would be generating data to create a checklist, such as all colors you'd want to offer for each shirt style in a warehouse.

** Using NULL to Find Rows with Missing Values


Being able to reveal missing data from one of the tables is valuable when you're digging through data. Any time you join tables, it's wise to vet the quality of the data and understand it better by discovering whether all key values in one table appear in another. There are many reasons why a discrepancy might exist, such as a clerical error, incomplete output from the database, or some change in the data over time. All this information is important context for making correct inferences about the data.

When you have only a handful of rows, eyeballing the data is an easy way to look for rows with missing data. For large tables, you need a better strategy: filtering to show all rows without a match. To do this, we employ the keyword NULL.

In SQL, NULL is a special value that represents a condition in which there's no data present or where the data is unknown because it wasn't included. For example, if a person filling out an address form skips the “Middle Initial” field, rather than storing an empty string in the database, we'd use NULL to represent the unknown value. It's important to keep in mind that NULL is different from 0 or an empty string that you'd place in a character field using two quotes (""). Both those values could have some unintended meaning that's open to misinterpretation, so you use NULL to show that the value is unknown. And unlike 0 or an empty string, you can use NULL across data types.

When a SQL join returns empty rows in one of the tables, those columns don't come back empty but instead come back with the value NULL. In [[file:ch06.xhtml#ch06list9][Listing 6-9]], we'll find those rows by adding a WHERE clause to filter for NULL by using the phrase IS NULL on the right_id column. If we wanted to look for columns /with/ data, we'd use IS NOT NULL.

SELECT *
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id
WHERE schools_right.id IS NULL;

/Listing 6-9: Filtering to show missing values with IS NULL/

Now the result of the join shows only the one row from the left table that didn't have a match on the right side.

id    left_school                 id    right_school
--    ------------------------    --    ------------
 5    Washington Middle School

** Three Types of Table Relationships


Part of the science (or art, some may say) of joining tables involves understanding how the database designer intends for the tables to relate, also known as the database's /relational model/. The three types of table relationships are one to one, one to many, and many to many.

*** One-to-One Relationship


In our JOIN example in [[file:ch06.xhtml#ch06list4][Listing 6-4]], there is only one match for an id in each of the two tables. In addition, there are no duplicate id values in either table: only one row in the left table exists with an id of 1, and only one row in the right table has an id of 1. In database parlance, this is called a /one-to-one/ relationship. Consider another example: joining two tables with state-by-state census data. One table might contain household income data and the other data on educational attainment. Both tables would have 51 rows (one for each state plus Washington, D.C.), and if we wanted to join them on a key such as state name, state abbreviation, or a standard geography code, we'd have only one match for each key value in each table.

*** One-to-Many Relationship/


In a /one-to-many/ relationship, a key value in the first table will have multiple matching values in the second table's joined column. Consider a database that tracks automobiles. One table would hold data on automobile manufacturers, with one row each for Ford, Honda, Kia, and so on. A second table with model names, such as Focus, Civic, Sedona, and Accord, would have several rows matching each row in the manufacturers' table.

*** Many-to-Many Relationship/

In a /many-to-many/ relationship, multiple rows in the first table will have multiple matching rows in the second table. As an example, a table of baseball players could be joined to a table of field positions. Each player can be assigned to multiple positions, and each position can be played by multiple people.

Understanding these relationships is essential because it helps us discern whether the results of queries accurately reflect the structure of the database.

** Selecting Specific Columns in a Join


So far, we've used the asterisk wildcard to select all columns from both tables. That's okay for quick data checks, but more often you'll want to specify a subset of columns. You can focus on just the data you want and avoid inadvertently changing the query results if someone adds a new column to a table.

As you learned in single-table queries, to select particular columns you use the SELECT keyword followed by the desired column names. When joining tables, the syntax changes slightly: you must include the column as well as its table name. The reason is that more than one table can contain columns with the same name, which is certainly true of our joined tables so far.

Consider the following query, which tries to fetch an id column without naming the table:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
SELECT id
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id;
#+end_src

Because id exists in both schools_left and schools_right, the server throws an error that appears in pgAdmin's results pane: column reference "id" is ambiguous. It's not clear which table id belongs to.

To fix the error, we need to add the table name in front of each column we're querying, as we do in the ON clause. [[file:ch06.xhtml#ch06list10][Listing 6-10]] shows the syntax, specifying that we want the id column from schools_left. We're also fetching the school names from both tables.

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-10: Querying specific columns in a join
SELECT schools_left.id,
       schools_left.left_school,
       schools_right.right_school
FROM schools_left LEFT JOIN schools_right
ON schools_left.id = schools_right.id;
#+end_src

#+RESULTS:
| id | left_school              | right_school          |
|----+--------------------------+-----------------------|
|  1 | Oak Street School        | Oak Street School     |
|  2 | Roosevelt High School    | Roosevelt High School |
|  5 | Washington Middle School |                       |
|  6 | Jefferson High School    | Jefferson High School |

We simply prefix each column name with the table it comes from, and the rest of the query syntax is the same. The result returns the requested columns from each table:


We can also add the AS keyword we used previously with census data to make it clear in the results that the id column is from schools_left. The syntax would look like this:

SELECT schools_left.id AS left_id, ...

This would display the name of the schools_left id column as left_id. We could do this for all the other columns we select using the same syntax, but the next section describes another, better method we can use to rename multiple columns.

** Simplifying JOIN Syntax with Table Aliases


Naming the table for a column is easy enough, but doing so for multiple columns clutters your code. One of the best ways to serve your colleagues is to write code that's readable, which should generally not involve making them wade through table names repeated for 25 columns! The way to write more concise code is to use a shorthand approach called /table aliases/.

To create a table alias, we place a character or two after the table name when we declare it in the FROM clause. (You can use more than a couple of characters for an alias, but if the goal is to simplify code, don't go overboard.) Those characters then serve as an alias we can use instead of the full table name anywhere we reference the table in the code. [[file:ch06.xhtml#ch06list11][Listing 6-11]] demonstrates how this works:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-11: Simplifying code with table aliases
SELECT lt.id,
       lt.left_school,
       rt.right_school
FROM schools_left AS lt LEFT JOIN schools_right AS rt
ON lt.id = rt.id;
#+end_src

#+RESULTS:
| id | left_school              | right_school          |
|----+--------------------------+-----------------------|
|  1 | Oak Street School        | Oak Street School     |
|  2 | Roosevelt High School    | Roosevelt High School |
|  5 | Washington Middle School |                       |
|  6 | Jefferson High School    | Jefferson High School |


In the FROM clause, we declare the alias lt to represent schools_left and the alias rt to represent schools_right ➊ using the AS keyword. Once that's in place, we can use the aliases instead of the full table names everywhere else in the code. Immediately, our SQL looks more compact, and that's ideal.

** Joining Multiple Tables


Of course, SQL joins aren't limited to two tables. We can continue adding tables to the query as long as we have columns with matching values to join on. Let's say we obtain two more school-related tables and want to join them to schools_left in a three-table join. Here are the tables: schools_enrollment has the number of students per school:

id    enrollment
--    ----------
 1           360
 2          1001
 5           450
 6           927

The schools_grades table contains the grade levels housed in each building:

id    grades
--    ------
 1    K-3
 2    9-12
 5    6-8
 6    9-12

To write the query, we'll use [[file:ch06.xhtml#ch06list12][Listing 6-12]] to create the tables and load the data:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
-- Listing 6-12: Joining multiple tables
CREATE TABLE schools_enrollment (
    id integer,
    enrollment integer
);

CREATE TABLE schools_grades (
    id integer,
    grades varchar(10)
);

INSERT INTO schools_enrollment (id, enrollment)
VALUES
    (1, 360),
    (2, 1001),
    (5, 450),
    (6, 927);

INSERT INTO schools_grades (id, grades)
VALUES
    (1, 'K-3'),
    (2, '9-12'),
    (5, '6-8'),
    (6, '9-12');

SELECT lt.id, lt.left_school, en.enrollment, gr.grades
FROM schools_left AS lt LEFT JOIN schools_enrollment AS en
    ON lt.id = en.id
LEFT JOIN schools_grades AS gr
    ON lt.id = gr.id;
#+end_src

#+RESULTS:
| CREATE TABLE |                          |            |        |
|--------------+--------------------------+------------+--------|
| CREATE TABLE |                          |            |        |
| INSERT 0 4   |                          |            |        |
| INSERT 0 4   |                          |            |        |
| id           | left_school              | enrollment | grades |
| 1            | Oak Street School        |        360 |    K-3 |
| 2            | Roosevelt High School    |       1001 |   9-12 |
| 5            | Washington Middle School |        450 |    6-8 |
| 6            | Jefferson High School    |        927 |   9-12 |

After we run the CREATE TABLE and INSERT portions of the script, the results consist of schools_enrollment and schools_grades tables, each with records that relate to schools_left from earlier in the chapter. We then connect all three tables.

In the SELECT query, we join schools_left to schools_enrollment ➊ using the tables' id fields. We also declare table aliases to keep the code compact. Next, the query joins schools_left to school_grades again on the id fields ➋.

Our result now includes columns from all three tables:


If you need to, you can add even more tables to the query using additional joins. You can also join on different columns, depending on the tables' relationships. Although there is no hard limit in SQL to the number of tables you can join in a single query, some database systems might impose one. Check the documentation.

** Performing Math on Joined Table Columns


The math functions we explored in [[file:ch05.xhtml#ch05][Chapter 5]] are just as usable when working with joined tables. We just need to include the table name when referencing a column in an operation, as we did when selecting table columns. If you work with any data that has a new release at regular intervals, you'll find this concept useful for joining a newly released table to an older one and exploring how values have changed.

That's certainly what I and many journalists do each time a new set of census data is released. We'll load the new data and try to find patterns in the growth or decline of the population, income, education, and other indicators. Let's look at how to do this by revisiting the us_counties_2010 table we created in [[file:ch04.xhtml#ch04][Chapter 4]] and loading similar county data from the previous Decennial Census, in 2000, to a new table. Run the code in [[file:ch06.xhtml#ch06list13][Listing 6-13]], making sure you've saved the CSV file somewhere first:

#+begin_src sql :engine postgresql :dbuser org  :dbpassword 1618 :database analysis
➊ CREATE TABLE us_counties_2000 (
      geo_name varchar(90),
      state_us_abbreviation varchar(2),
      state_fips varchar(2),
      county_fips varchar(3),
      p0010001 integer,
      p0010002 integer,
      p0010003 integer,
      p0010004 integer,
      p0010005 integer,
      p0010006 integer,
      p0010007 integer,
      p0010008 integer,
      p0010009 integer,
      p0010010 integer,
      p0020002 integer,
      p0020003 integer
  );

➋ COPY us_counties_2000
  FROM '/C:YourDirectory/us_counties_2000.csv'
  WITH (FORMAT CSV, HEADER);

➌ SELECT c2010.geo_name,
         c2010.state_us_abbreviation AS state,
         c2010.p0010001 AS pop_2010,
         c2000.p0010001 AS pop_2000
         c2010.p0010001 - c2000.p0010001 AS raw_change,
       ➍ round( (CAST(c2010.p0010001 AS numeric(8,1)) - c2000.p0010001)
             / c2000.p0010001 * 100, 1 ) AS pct_change
  FROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000
➎ ON c2010.state_fips = c2000.state_fips
     AND c2010.county_fips = c2000.county_fips
   ➏ AND c2010.p0010001 <> c2000.p0010001
➐ ORDER BY pct_change DESC;
#+end_src

/Listing 6-13: Performing math on joined census tables/

In this code, we're building on earlier foundations. We have the familiar CREATE TABLE statement ➊, which for this exercise includes state and county codes, a geo_name column with the full name of the state and county, and nine columns with population counts including total population and counts by race. The COPY statement ➋ imports a CSV file with the census data; you can find /us_counties_2000.csv/ along with all of the book's resources at /[[https://www.nostarch.com/practicalSQL/]]/. After you've downloaded the file, you'll need to change the file path to the location where you saved it.

When you've finished the import, you should have a table named us_counties_2000 with 3,141 rows. As with the 2010 data, this table has a column named p0010001 that contains the total population for each county in the United States. Because both tables have the same column, it makes sense to calculate the percent change in population for each county between 2000 and 2010. Which counties have led the nation in growth? Which ones have a decline in population?

We'll use the percent change calculation we used in [[file:ch05.xhtml#ch05][Chapter 5]] to get the answer. The SELECT statement ➌ includes the county's name and state abbreviation from the 2010 table, which is aliased with c2010. Next are the p0010001 total population columns from the 2010 and 2000 tables, both renamed with unique names using AS to distinguish them in the results. To get the raw change in population, we subtract the 2000 population from the 2010 count, and to find the percent change, we employ a formula ➍ and round the results to one decimal point.

We join by matching values in two columns in both tables: state_fips and county_fips ➎. The reason to join on two columns instead of one is that in both tables, we need the combination of a state code and a county code to find a unique county. I've added a third condition ➏ to illustrate using an inequality. This limits the join to counties where the p0010001 population column has a different value. We combine all three conditions using the AND keyword. Using that syntax, a join happens when all three conditions are satisfied. Finally, the results are sorted in descending order by percent change ➐ so we can see the fastest growers at the top.

That's a lot of work, but it's worth it. Here's what the first five rows of the results indicate:

[[./prac-images/prog_page_90.jpg]]

Two counties, Kendall in Illinois and Pinal in Arizona, more than doubled their population in 10 years, with counties in Florida, South Dakota, and Virginia not far behind. That's a valuable story we've extracted from this analysis and a starting point for understanding national population trends. If you were to dig into the data further, you might find that many of the counties with the largest growth from 2000 to 2010 were suburban bedroom communities that benefited from the decade's housing boom, and that a more recent trend sees Americans leaving rural areas to move to cities. That could make for an interesting analysis following the 2020 Decennial Census.

** Wrapping Up


Given that table relationships are foundational to database architecture, learning to join tables in queries allows you to handle many of the more complex data sets you'll encounter. Experimenting with the different types of joins on tables can tell you a great deal about how data have been gathered and reveal when there's a quality issue. Make trying various joins a routine part of your exploration of a new data set.

Moving forward, we'll continue building on these bigger concepts as we drill deeper into finding information in data sets and working with the finer nuances of handling data types and making sure we have quality data. But first, we'll look at one more foundational element: employing best practices to build reliable, speedy databases with SQL.


*TRY IT YOURSELF*

Continue your exploration of joins with these exercises:

1. The table us_counties_2010 contains 3,143 rows, and us_counties_2000 has 3,141. That reflects the ongoing adjustments to county-level geographies that typically result from government decision making. Using appropriate joins and the NULL value, identify which counties don't exist in both tables. For fun, search online to find out why they're missing.

2. Using either the median() or percentile_cont() functions in [[file:ch05.xhtml#ch05][Chapter 5]], determine the median of the percent change in county population.

3. Which county had the greatest percentage loss of population between 2000 and 2010? Do you have any idea why? (Hint: A major weather event happened in 2005.)


 you might find that many of the counties with the largest growth from 2000 to 2010 were suburban bedroom communities that benefited from the decade's housing boom, and that a more recent trend sees Americans leaving rural areas to move to cities. That could make for an interesting analysis following the 2020 Decennial Census.

